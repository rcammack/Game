{"version":3,"sources":["Form.js","Board.js","Game.js","App.js","index.js"],"names":["Form","props","state","value","judgeMode","players","handleChange","bind","handleSubmit","event","this","setState","target","preventDefault","onClick","className","onSubmit","refresh","style","display","onQuestionRefresh","question","maxWidth","type","placeholder","onChange","marginTop","marginBottom","fontWeight","color","answer","map","player","key","React","Component","Board","row","board","cellCounter","i","columns","push","renderSquare","answers","roundDone","questions","createBoard","blanks","Game","onMakeMove","index","backlog","userIndex","targetIndex","oldTargetIndex","length","pubnub","publish","message","name","channel","gameChannel","onGuess","guess","answerer","answerers","answererIndex","indexOf","correctGuess","judge","user","QLIndex","questionsList","endIndex","oldIndex","newIndex","rows","occupants","cols","answerBlanks","answererBlanks","j","shuffledQuestionsList","isRoomCreator","shuffleQuestionsList","slice","scores","Array","fill","judgeCount","gameOver","madeMove","getMessage","msg","splice","newRound","reset","prevIndex","every","item","endGame","Swal","close","Math","floor","random","temp","reverse","fontSize","marginLeft","App","onPressCreate","e","roomId","shortid","generate","substring","lobbyChannel","subscribe","channels","withPresence","fire","position","input","allowOutsideClick","inputPlaceholder","showCancelButton","confirmButtonColor","confirmButtonText","width","padding","customClass","heightAuto","popup","confirmButton","cancelButton","then","result","createIsDisabled","unsubscribe","onPressJoin","joinRoom","onPressStart","start","onPressRemove","startIsDisabled","isPlaying","init","PubNubReact","publishKey","subscribeKey","addListener","console","log","includes","getStatus","statusEvent","category","margin","disabled","textAlign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.83005dbd.chunk.js","sourcesContent":["import React from 'react';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: this.props.judgeMode ? this.props.players[0] : \"\" };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.onClick(this.state.value);\n    this.setState({ value: this.props.judgeMode ? this.props.players[0] : \"\" });\n  }\n\n  render() {\n    return (\n      <div>\n        {!this.props.judgeMode &&\n          <form className=\"ui form\" onSubmit={this.handleSubmit}>\n            <div className=\"field\">\n              <label>\n                {this.props.refresh && <i style={{ display: \"inline\" }} className=\"blue redo icon\" onClick={() => this.props.onQuestionRefresh()}></i>}&nbsp;\n                {this.props.question}:\n              </label>\n              <div className=\"ui action input\" style={{ maxWidth: \"500px\" }}>\n                <input className=\"ui input\" type=\"text\" placeholder=\"answer\" value={this.state.value} onChange={this.handleChange} />\n                <button className=\"ui button\" value=\"Submit\">Submit</button>\n              </div>\n            </div>\n          </form>\n        }\n        {this.props.judgeMode &&\n          <form className=\"ui form\" onSubmit={this.handleSubmit}>\n            <label style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\n              <p style={{ display: \"inline\", fontWeight: \"bold\" }}>{this.props.question}:</p>&nbsp;\n                  <p style={{ display: \"inline\", fontWeight: \"bold\", color: \"CornflowerBlue\" }}>{this.props.answer}</p>\n            </label>\n            <div className=\"inline fields\">\n              <div className=\"field\">\n                <select className=\"ui selection dropdown\" value={this.state.value} onChange={this.handleChange}>\n                  {this.props.players.map((player) => <option key={player} value={player}>{player}</option>)}\n                </select>\n              </div>\n              <div className=\"field\">\n                <input className=\"ui button\" type=\"submit\" value=\"Submit\" />\n              </div>\n            </div>\n          </form>\n        }\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React from 'react';\nimport Form from './Form';\n\nclass Board extends React.Component {\n\n  // Create the 3 x 3 board\n  createBoard(row) {\n    const board = [];\n    let cellCounter = 0;\n\n    for (let i = 0; i < row; i += 1) {\n      const columns = [];\n      columns.push(this.renderSquare(cellCounter++));\n      board.push(<div key={i}>{columns}</div>);\n    }\n\n    return board;\n  }\n\n  renderSquare(i) {\n    return (\n      <div style={{ marginBottom: \"10px\"}} key={i}>\n        {((this.props.answers[i] === \"\" && !this.props.roundDone) || this.props.judgeMode) &&\n          <Form\n            judgeMode={this.props.judgeMode}\n            players={this.props.players}\n            question={this.props.questions[i]}\n            answer={this.props.answers[i]}\n            onClick={(value) => this.props.onClick(i, value)}\n            onQuestionRefresh={() => this.props.onQuestionRefresh(i)}\n            refresh={this.props.refresh} />\n        }\n        {((this.props.answers[i] !== \"\" && !this.props.judgeMode) || (this.props.roundDone && !this.props.judgeMode)) &&\n          <div>\n            <p style={{ display: \"inline\" }}>{this.props.questions[i]}:</p>&nbsp;\n          <p style={{ display: \"inline\", color: \"CornflowerBlue\" }}>{this.props.answers[i]}</p>\n          </div>\n        }\n      </div>\n    );\n  }\n\n  render() {\n    return <div>{this.createBoard(this.props.blanks)}</div>;\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport Board from './Board';\nimport Swal from \"sweetalert2\";\nimport questionsList from './questions.json';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.userIndex = this.props.players.indexOf(this.props.name);\n    this.targetIndex = this.userIndex + 1;\n    if (this.targetIndex >= this.props.players.length) {\n      this.targetIndex = 0;\n    }\n    var target = this.props.players[this.targetIndex];\n\n    // create multidimensional arrays this way for an annoying reason\n    var rows = this.props.occupants; //num of players\n    var cols = this.props.occupants - 1; //answer blanks\n    var answers = [];\n    var answerers = [];\n\n    for (let i = 0; i < rows; i++) {\n      var answerBlanks = [];\n      var answererBlanks = [];\n      for (let j = 0; j < cols; j++) {\n        answerBlanks.push(\"\");\n        answererBlanks.push(\"\");\n      }\n      answers.push(answerBlanks);\n      answerers.push(answererBlanks);\n    }\n\n    var questions = [];\n    var shuffledQuestionsList = [];\n    if (this.props.isRoomCreator) {\n      shuffledQuestionsList = this.shuffleQuestionsList();\n      questions = shuffledQuestionsList.slice(0, this.props.occupants - 1);\n      this.props.pubnub.publish({\n        message: {\n          questionsList: shuffledQuestionsList,\n          questions: questions,\n        },\n        channel: this.props.gameChannel\n      });\n    }\n\n    this.state = {\n      target: target,\n\n      scores: Array(this.props.occupants).fill(0),\n      backlog: Array(this.props.occupants).fill(1),\n\n      questionsList: shuffledQuestionsList,\n      questions: questions,\n      answers: answers, // [player][answer]\n      answerers: answerers,\n\n      roundDone: false,\n      judgeMode: false,\n    };\n\n    this.judgeCount = 0;\n    this.gameOver = false;\n    this.players = this.props.players;\n    this.madeMove = false;\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n      // set questions\n      if (msg.message.questions) {\n        this.setState({\n          questionsList: msg.message.questionsList,\n          questions: msg.message.questions,\n        });\n      }\n\n      //refresh questions\n      if (msg.message.newIndex) {\n        this.setState((state) => {\n          var questionsList = state.questionsList;\n          var questions = state.questions;\n          //replace old index and delete the new question\n          questionsList[msg.message.oldIndex] = questionsList[msg.message.newIndex];\n          //remove the original new question so it's not used twice\n          questionsList.splice(msg.message.newIndex, 1);\n          //replace question in currently used questions\n          questions[msg.message.i] = questionsList[msg.message.oldIndex];\n          return {\n            questionsList: questionsList,\n            questions: questions\n          };\n        });\n      }\n\n      // update scores / done judging? / new round?\n      else if (msg.message.judge) {\n        this.setState((state) => {\n          var scores = state.scores;\n          scores[msg.message.answererIndex] = scores[msg.message.answererIndex] + 1;\n          if (msg.message.correctGuess) {\n            scores[msg.message.user] = scores[msg.message.user] + 1;\n          }\n          return {\n            scores: scores,\n            judgeMode: msg.message.judge === this.players[this.userIndex] ? false : state.judgeMode\n          };\n        });\n\n        this.judgeCount++;\n        if (this.judgeCount === this.props.occupants) {\n          this.newRound();\n        }\n      }\n\n      // someone 'made move' aka answered a question\n      else if (!msg.message.reset && msg.message.name) {\n        this.madeMove = true;\n        this.setState((state) => {\n          var backlog = state.backlog;\n          var answers = state.answers;\n          var answerers = state.answerers;\n          answers[msg.message.oldTargetIndex][msg.message.index] = (msg.message.answer === \"\") ? \"no answer\" : msg.message.answer;\n          answerers[msg.message.oldTargetIndex][msg.message.index] = msg.message.name;\n\n          //update backlog (prev person+1, current person-1)\n          backlog[msg.message.userIndex] = backlog[msg.message.userIndex] - 1;\n          var prevIndex = msg.message.userIndex - 1;\n          if (prevIndex < 0) {\n            prevIndex = this.players.length - 1;\n          }\n          if (msg.message.oldTargetIndex !== prevIndex) { // dont add to prev person's backlog if they're getting their own back\n            backlog[prevIndex] = backlog[prevIndex] + 1;\n          }\n\n          var judgeMode = false;\n          if (backlog.every(item => item === 0)) {\n            judgeMode = true;\n          }\n\n          return {\n            answers: answers,\n            answerers: answerers,\n            backlog: backlog,\n            judgeMode: state.judgeMode || judgeMode\n          };\n        });\n      }\n\n      // Start a new game\n      else if (msg.message.reset) {\n        this.userIndex = this.players.indexOf(this.props.name);\n        this.targetIndex = this.userIndex + 1;\n        if (this.targetIndex >= this.players.length) {\n          this.targetIndex = 0;\n        }\n        var target = this.players[this.targetIndex];\n\n        this.setState({\n          target: target,\n\n          scores: Array(this.props.occupants).fill(0),\n          backlog: Array(this.props.occupants).fill(1),\n\n          questions: Array(this.props.occupants - 1).fill(\"q\"),\n          answers: Array(this.props.occupants).fill(Array(this.props.occupants - 1).fill(\"\")), // [player][answer]\n          answerers: Array(this.props.occupants).fill(Array(this.props.occupants - 1).fill(\"\")),\n\n          roundDone: false,\n          judgeMode: false,\n        });\n\n        this.gameOver = false;\n      }\n\n      // End the game and go back to the lobby\n      else if (msg.message.endGame) {\n        Swal.close();\n        this.props.endGame();\n      }\n    });\n  }\n\n  shuffleQuestionsList() {\n    var shuffledQuestionsList = [...questionsList];\n    for (let i = shuffledQuestionsList.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i)\n      const temp = shuffledQuestionsList[i]\n      shuffledQuestionsList[i] = shuffledQuestionsList[j]\n      shuffledQuestionsList[j] = temp\n    }\n    return shuffledQuestionsList;\n  }\n\n  onMakeMove = (index, answer) => {\n    // Check if user has backlog & field is empty\n    if (this.state.backlog[this.userIndex] > 0 && !this.state.answers[this.targetIndex][index]) {\n      //next target\n      var oldTargetIndex = this.targetIndex;\n      // update target\n      this.targetIndex++;\n      if (this.targetIndex >= this.players.length) {\n        this.targetIndex = 0;\n      }\n      var target = this.players[this.targetIndex];\n      var roundDone = false;\n      if (this.targetIndex === this.userIndex) {\n        roundDone = true;\n      }\n      this.setState({\n        target: target,\n        roundDone: roundDone,\n      });\n\n      this.props.pubnub.publish({\n        message: {\n          oldTargetIndex: oldTargetIndex,\n          index: index,\n          answer: answer,\n          name: this.props.name,\n          userIndex: this.userIndex,\n        },\n        channel: this.props.gameChannel\n      });\n    }\n  }\n\n  onGuess = (index, guess) => {\n    var answerer = this.state.answerers[this.userIndex][index];\n    var answererIndex = this.players.indexOf(answerer);\n\n    var correctGuess = false;\n    if (answerer === guess) {\n      correctGuess = true;\n    }\n\n    // Publish move to the channel\n    this.props.pubnub.publish({\n      message: {\n        judge: this.players[this.userIndex],\n        user: this.userIndex,\n        answererIndex: answererIndex,\n        correctGuess: correctGuess\n      },\n      channel: this.props.gameChannel\n    });\n\n    // Check if there is a winner\n    // this.checkForWinner()\n  }\n\n  // checkForWinner() {\n  //   const winnerIndex = this.state.scores.findIndex(score => score >= 10);\n  //   if (winnerIndex >= 0) {\n  //     this.gameOver = true;\n  //     this.newRound(this.players[winnerIndex]);\n  //     // change state in order to rerender ?\n  //   }\n  // };\n\n  newRound() { // reset everything except questionsList, reverse players/scores & update user index\n    this.judgeCount = 0;\n    this.madeMove = false;\n    this.players = this.players.reverse();\n    this.userIndex = this.players.indexOf(this.props.name);\n    this.targetIndex = this.userIndex + 1;\n    if (this.targetIndex >= this.players.length) {\n      this.targetIndex = 0;\n    }\n    var target = this.players[this.targetIndex];\n\n    // create multidimensional arrays this way for an annoying reason\n    var rows = this.props.occupants; //number of players\n    var cols = this.props.occupants - 1; //answer blanks\n    var answers = [];\n    var answerers = [];\n\n    for (let i = 0; i < rows; i++) {\n      var answerBlanks = [];\n      var answererBlanks = [];\n      for (let j = 0; j < cols; j++) {\n        answerBlanks.push(\"\");\n        answererBlanks.push(\"\");\n      }\n      answers.push(answerBlanks);\n      answerers.push(answererBlanks);\n    }\n\n    var i = this.state.questionsList.indexOf(this.state.questions[this.state.questions.length - 1]);\n    var questions = this.state.questionsList.slice(i + 1, i + this.props.occupants);\n\n    this.setState((state) => { //set state this way because of scores relying on state.scores\n      return {\n        target: target,\n        scores: state.scores.reverse(),\n        backlog: Array(this.props.occupants).fill(1),\n        questions: questions,\n        answers: answers, // [player][answer]\n        answerers: answerers,\n        roundDone: false,\n        judgeMode: false,\n      };\n    });\n  }\n\n  onQuestionRefresh = (i) => {\n    // index of the question in the questionsList\n    var QLIndex = this.state.questionsList.indexOf(this.state.questions[i]);\n    // index of last [question] in questionsList\n    var endIndex = this.state.questionsList.indexOf(this.state.questions[this.state.questions.length - 1]);\n    // if the next unused index in questionsList exists (aka if we didn't go through the entire questionsList)\n    if (endIndex + 1 < this.state.questionsList.length) {\n      this.props.pubnub.publish({\n        message: {\n          i: i,\n          oldIndex: QLIndex,\n          newIndex: endIndex + 1,\n        },\n        channel: this.props.gameChannel\n      });\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div>\n          <p style={{ display: \"inline\", fontSize: \"26px\" }}>{this.props.name}</p>&nbsp;&nbsp;&nbsp;&nbsp;\n          <p style={{ display: \"inline\" }}>Score: {this.state.scores[this.userIndex]}</p>\n          {this.state.scores[this.userIndex] >= 8 && <i className=\"yellow trophy icon\" style={{ marginLeft: \"10px\" }} />}&nbsp;&nbsp;&nbsp;&nbsp;\n          <p style={{ display: \"inline\" }}>Backlog: {this.state.backlog[this.userIndex]}</p>\n        </div>\n        {!this.state.judgeMode &&\n          <div >\n            <p style={{ fontSize: \"26px\", color: \"Tomato\", marginTop: \"15px\", marginBottom: \"10px\" }}>Target: {this.state.target}</p>\n            {this.state.backlog[this.userIndex] !== 0 &&\n              <Board\n                roundDone={this.state.roundDone}\n                blanks={this.props.occupants - 1}\n                questions={this.state.questions}\n                answers={this.state.answers[this.targetIndex]}\n                onClick={(index, answer) => this.onMakeMove(index, answer)}\n                judgeMode={this.state.judgeMode}\n                players={this.players}\n                onQuestionRefresh={(i) => this.onQuestionRefresh(i)}\n                refresh={this.props.isRoomCreator && !this.madeMove}\n              />\n            }\n            {this.state.backlog[this.userIndex] === 0 && //includes if you're waiting for your own sheet back\n              <p>waiting...</p>\n            }\n          </div>\n        }\n        {this.state.judgeMode &&\n          <div >\n            <p style={{ fontSize: \"20px\", color: \"Tomato\", marginTop: \"30px\", marginBottom: \"10px\" }}>Guess who wrote your fav answer</p>\n            <Board\n              roundDone={false}\n              blanks={this.props.occupants - 1}\n              questions={this.state.questions}\n              answers={this.state.answers[this.targetIndex]}\n              onClick={(index, guess) => this.onGuess(index, guess)}\n              judgeMode={this.state.judgeMode}\n              players={this.players}\n              refresh={false}\n            />\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport Game from './Game';\nimport PubNubReact from 'pubnub-react';\nimport Swal from \"sweetalert2\";\nimport shortid from 'shortid';\nimport './Game.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.pubnub = new PubNubReact({\n      publishKey: \"pub-c-5a45de7f-2d49-4913-a215-3a91b54a312e\",\n      subscribeKey: \"sub-c-065bec9c-9b29-11ea-8e71-f2b83ac9263d\"\n    });\n\n    this.state = {\n      name: \"\",\n      players: [],\n      isPlaying: false,\n      isRoomCreator: false,\n      createIsDisabled: false,\n      startIsDisabled: true,\n      gameChannel: null,\n    };\n\n    this.occupants = 0;\n    this.lobbyChannel = null;\n    this.roomId = null;\n    this.pubnub.init(this);\n\n    this.pubnub.addListener({\n      message: function (msg) {\n        console.log(\"listener: message in \", msg.channel, msg.message);\n      }\n    })\n  }\n\n  componentDidUpdate() {\n    if (this.lobbyChannel != null) {\n      this.pubnub.getMessage(this.lobbyChannel, (msg) => {\n        if (msg.message.name != null && this.state.isRoomCreator) {\n          if (!this.state.players.includes(msg.message.name)) {\n            this.occupants++;\n            var startIsDisabled = true;\n            if (this.occupants > 2) {\n              startIsDisabled = false;\n            }\n            this.setState((state) => {\n              var players = state.players;\n              players.push(msg.message.name);\n              return {\n                startIsDisabled: startIsDisabled,\n                players: players\n              };\n            })\n          }\n        }\n        if (msg.message.start && msg.message.occupants >= 3) {\n          if (msg.message.players.includes(this.state.name)) {\n            this.occupants = msg.message.occupants;\n            this.pubnub.subscribe({\n              channels: [msg.message.gameChannel],\n              withPresence: true,\n            });\n            this.setState({\n              players: msg.message.players,\n              gameChannel: msg.message.gameChannel,\n            })\n          } else {\n            this.pubnub.unsubscribe({\n              channels: [this.lobbyChannel]\n            });\n          }\n        }\n      });\n    }\n\n    if (this.state.gameChannel != null) {\n      this.pubnub.getStatus((statusEvent) => {\n        if (statusEvent.category === \"PNConnectedCategory\") {\n          console.log(\"connected to game channel\");\n          this.setState({\n            isPlaying: true,\n          })\n        }\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.state.gameChannel]\n    });\n  }\n\n  // Create a room channel\n  onPressCreate = (e) => {\n    // Create a random name for the channel\n    this.roomId = shortid.generate().substring(0, 5);\n    this.lobbyChannel = 'tictactoelobby--' + this.roomId;\n    this.occupants = 1;\n    this.pubnub.subscribe({\n      channels: [this.lobbyChannel],\n      withPresence: true\n    });\n\n    //get name\n    Swal.fire({\n      position: 'top',\n      input: 'text',\n      allowOutsideClick: false,\n      inputPlaceholder: 'Enter your name',\n      showCancelButton: true,\n      confirmButtonColor: 'rgb(208,33,41)',\n      confirmButtonText: 'OK',\n      width: 275,\n      padding: '0.7em',\n      customClass: {\n        heightAuto: false,\n        popup: 'popup-class',\n        confirmButton: 'join-button-class',\n        cancelButton: 'join-button-class'\n      }\n    }).then((result) => {\n      // Check if the user typed a value in the input field\n      if (result.value) {\n        var players = [];\n        players.push(result.value);\n        this.setState({\n          name: result.value,\n          players: players,\n          isRoomCreator: true,\n          createIsDisabled: true, // Disable the 'Create' button\n        })\n      } else {\n        this.pubnub.unsubscribe({\n          channels: [this.lobbyChannel]\n        });\n      }\n    })\n  }\n\n  // The 'Join' button was pressed\n  onPressJoin = (e) => {\n    Swal.fire({\n      position: 'top',\n      input: 'text',\n      allowOutsideClick: false,\n      inputPlaceholder: 'Enter the room id',\n      showCancelButton: true,\n      confirmButtonColor: 'rgb(208,33,41)',\n      confirmButtonText: 'OK',\n      width: 275,\n      padding: '0.7em',\n      customClass: {\n        heightAuto: false,\n        popup: 'popup-class',\n        confirmButton: 'join-button-class',\n        cancelButton: 'join-button-class'\n      }\n    }).then((result) => {\n      // Check if the user typed a value in the input field\n      if (result.value) {\n        this.joinRoom(result.value);\n      }\n    })\n  }\n\n  // Join a room channel\n  joinRoom = (value) => {\n    this.roomId = value;\n    this.lobbyChannel = 'tictactoelobby--' + this.roomId;\n\n    this.pubnub.subscribe({\n      channels: [this.lobbyChannel],\n      withPresence: true\n    });\n\n    //get name\n    Swal.fire({\n      position: 'top',\n      input: 'text',\n      allowOutsideClick: false,\n      inputPlaceholder: 'Enter your name',\n      showCancelButton: true,\n      confirmButtonColor: 'rgb(208,33,41)',\n      confirmButtonText: 'OK',\n      width: 275,\n      padding: '0.7em',\n      customClass: {\n        heightAuto: false,\n        popup: 'popup-class',\n        confirmButton: 'join-button-class',\n        cancelButton: 'join-button-class'\n      }\n    }).then((result) => {\n      // Check if the user typed a value in the input field\n      if (result.value) {\n        this.setState({\n          name: result.value,\n        })\n        this.pubnub.publish({\n          message: {\n            name: result.value,\n          },\n          channel: this.lobbyChannel\n        });\n      } else {\n        this.pubnub.unsubscribe({\n          channels: [this.lobbyChannel]\n        });\n      }\n    })\n  }\n\n  onPressStart = (e) => {\n    // Check that the player is connected to a channel\n    if (this.lobbyChannel != null) {\n      // Create a different channel for the game\n      var gameChannel = 'tictactoegame--' + this.roomId;\n\n      this.pubnub.publish({\n        message: {\n          start: true,\n          occupants: this.occupants,\n          players: this.state.players,\n          gameChannel: gameChannel\n        },\n        channel: this.lobbyChannel\n      });\n\n      // Close the modals if they are opened\n      Swal.close();\n    }\n  }\n\n  onPressRemove = (player) => {\n    this.occupants--;\n    var startIsDisabled = false;\n    if (this.occupants < 3) {\n      startIsDisabled = true;\n    }\n    this.setState((state) => {\n      var players = state.players;\n      players.splice(state.players.indexOf(player), 1);\n      return {\n        startIsDisabled: startIsDisabled,\n        players: players\n      };\n    })\n  }\n\n  // Reset everything\n  endGame = () => {\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.state.gameChannel]\n    });\n\n    this.setState({\n      name: \"\",\n      players: [],\n      isPlaying: false,\n      isRoomCreator: false,\n      createIsDisabled: false,\n      startIsDisabled: true,\n      gameChannel: null,\n    });\n\n    this.occupants = 0;\n    this.lobbyChannel = null;\n    this.roomId = null;\n    this.pubnub.init(this);\n  }\n\n  render() {\n    return (\n      <div>\n        {!this.state.isPlaying &&\n          <div className=\"lobby\">\n            <h1 style={{ margin: \"auto\", marginBottom: \"30px\" }}>\n              <div style={{ display: \"inline\" }}>Truth Bomb </div>\n              <i style={{ display: \"inline\" }} className=\"bomb icon\"></i>\n            </h1>\n            {this.roomId && <p style={{ margin: \"auto\", marginBottom: \"15px\" }}>Share this room ID with your friends: {this.roomId}</p>}\n            <div style={{ margin: \"auto\" }}>\n              { // no room id yet -> create or join\n                !this.roomId &&\n                <div className=\"ui buttons\">\n                  <button\n                    className=\"ui button\"\n                    style={{ width: \"90px\" }}\n                    disabled={this.state.createIsDisabled}\n                    onClick={(e) => this.onPressCreate()}\n                  > Create\n                  </button>\n                  <div className=\"or\"></div>\n                  <button\n                    className=\"ui button\"\n                    style={{ width: \"90px\" }}\n                    onClick={(e) => this.onPressJoin()}\n                  > Join\n                  </button>\n                </div>\n              }\n\n              { // created game and waiting for people to join\n                this.roomId && this.state.isRoomCreator &&\n                <div style={{ margin: \"auto\", textAlign: \"center\" }}>\n                  <button\n                    className=\"ui button\"\n                    style={{ marginBottom: \"15px\" }}\n                    disabled={this.state.startIsDisabled}\n                    onClick={(e) => this.onPressStart()}\n                  > Start\n                  </button>\n                  {this.state.players.map((player, i) =>\n                    <div style={{ textAlign: \"left\" }} key={i}>\n                      {player !== this.state.name && <i style={{ display: \"inline\" }} className=\"red close icon\" onClick={(e) => this.onPressRemove(player)}></i>}\n                      <p style={{ display: \"inline\" }}>{player}</p>\n                    </div>\n                  )}\n                </div>\n              }\n\n              { // waiting for roomCreator to start\n                this.roomId != null && !this.state.isRoomCreator &&\n                <div>\n                  <p style={{ textAlign: \"center\" }}>Hi, {this.state.name}!</p>\n                  <p style={{ textAlign: \"center\" }}>waiting for room creator to start...</p>\n                </div>\n              }\n            </div>\n          </div>\n        }\n\n        {this.state.isPlaying &&\n          <Game\n            pubnub={this.pubnub}\n            gameChannel={this.state.gameChannel}\n            name={this.state.name}\n            players={this.state.players}\n            occupants={this.occupants}\n            isRoomCreator={this.state.isRoomCreator}\n            endGame={this.endGame}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}