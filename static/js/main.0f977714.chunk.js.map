{"version":3,"sources":["Form.js","Board.js","Game.js","App.js","index.js"],"names":["Form","props","state","value","judgeMode","players","handleChange","bind","handleSubmit","event","this","setState","target","preventDefault","onClick","onSubmit","question","type","onChange","style","marginTop","marginBottom","display","color","answer","map","player","key","marginLeft","React","Component","Board","row","board","cellCounter","i","columns","push","renderSquare","answers","roundDone","questions","createBoard","blanks","Game","publishMove","updatedAnswers","updatedAnswerers","backlog","answerers","onMakeMove","index","targetIndex","userIndex","name","nextTarget","onGuess","guess","scores","answerer","answererIndex","indexOf","pubnub","publish","message","judge","channel","gameChannel","length","rows","occupants","cols","answerBlanks","answererBlanks","j","shuffledQuestionsList","isRoomCreator","shuffleQuestionsList","slice","console","log","questionsList","Array","fill","judgeCount","gameOver","getMessage","msg","newRound","reset","endGame","Swal","close","Math","floor","random","temp","oldTargetIndex","prevIndex","every","item","onMakeMove2","fontSize","className","App","onPressCreate","e","roomId","shortid","generate","substring","lobbyChannel","subscribe","channels","withPresence","fire","position","input","allowOutsideClick","inputPlaceholder","showCancelButton","confirmButtonColor","confirmButtonText","width","padding","customClass","heightAuto","popup","confirmButton","cancelButton","then","result","createIsDisabled","myTurn","onPressJoin","joinRoom","onPressStart","start","isPlaying","unsubscribe","startIsDisabled","init","PubNubReact","publishKey","subscribeKey","connect","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f977714.chunk.js","sourcesContent":["import React from 'react';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: this.props.judgeMode ? this.props.players[0] : \"\" };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.onClick(this.state.value);\n    this.setState({ value: this.props.judgeMode ? this.props.players[0] : \"\" });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        {!this.props.judgeMode &&\n          <label>\n            <p>{this.props.question}:</p>\n            <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n          </label>\n        }\n        {this.props.judgeMode &&\n          <label>\n            <div style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\n              <p style={{ display: \"inline\" }}>{this.props.question}:</p>&nbsp;\n              <p style={{ display: \"inline\", color: \"LightSkyBlue\" }}>{this.props.answer}</p>\n            </div>\n            <select value={this.state.value} onChange={this.handleChange}>\n              {this.props.players.map((player) => <option key={player} value={player}>{player}</option>)}\n            </select>\n          </label>\n        }\n        <input style={{ marginLeft: \"12px\" }} type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React from 'react';\nimport Form from './Form';\n\nclass Board extends React.Component {\n\n  // Create the 3 x 3 board\n  createBoard(row) {\n    const board = [];\n    let cellCounter = 0;\n\n    for (let i = 0; i < row; i += 1) {\n      const columns = [];\n      columns.push(this.renderSquare(cellCounter++));\n      board.push(<div key={i}>{columns}</div>);\n    }\n\n    return board;\n  }\n\n  renderSquare(i) {\n    return (\n      <div key={i}>\n        {((this.props.answers[i] === \"\" && !this.props.roundDone) || this.props.judgeMode) &&\n          <Form\n            judgeMode={this.props.judgeMode}\n            players={this.props.players}\n            question={this.props.questions[i]}\n            answer={this.props.answers[i]}\n            onClick={(value) => this.props.onClick(i, value)} />\n        }\n        {((this.props.answers[i] !== \"\" && !this.props.judgeMode) || (this.props.roundDone && !this.props.judgeMode)) &&\n          <p>{this.props.questions[i]}: {this.props.answers[i]}</p>\n        }\n      </div>\n    );\n  }\n\n  render() {\n    return <div>{this.createBoard(this.props.blanks)}</div>;\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport Board from './Board';\nimport Swal from \"sweetalert2\";\nimport questionsList from './questions.json';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.userIndex = this.props.players.indexOf(this.props.name);\n    this.targetIndex = this.userIndex + 1;\n    if (this.targetIndex >= this.props.players.length) {\n      this.targetIndex = 0;\n    }\n    var target = this.props.players[this.targetIndex];\n\n    // create multidimensional arrays this way for an annoying reason\n    var rows = this.props.occupants; //players\n    var cols = this.props.occupants - 1; //answer blanks\n    var answers = [];\n    var answerers = [];\n\n    for (let i = 0; i < rows; i++) {\n      var answerBlanks = [];\n      var answererBlanks = [];\n      for (let j = 0; j < cols; j++) {\n        answerBlanks.push(\"\");\n        answererBlanks.push(\"\");\n      }\n      answers.push(answerBlanks);\n      answerers.push(answererBlanks);\n    }\n\n    var questions = [];\n    var shuffledQuestionsList = [];\n    if (this.props.isRoomCreator) {\n      shuffledQuestionsList = this.shuffleQuestionsList();\n      questions = shuffledQuestionsList.slice(0, this.props.occupants - 1);\n      console.log(\"questions getting published\");\n      this.props.pubnub.publish({\n        message: {\n          questionsList: shuffledQuestionsList,\n          questions: questions,\n        },\n        channel: this.props.gameChannel\n      });\n    }\n\n    this.state = {\n      target: target,\n\n      scores: Array(this.props.occupants).fill(0),\n      backlog: Array(this.props.occupants).fill(1),\n\n      questionsList: shuffledQuestionsList,\n      questions: questions,\n      answers: answers, // [player][answer]\n      answerers: answerers,\n\n      roundDone: false,\n      judgeMode: false,\n    };\n\n    this.judgeCount = 0;\n    this.gameOver = false;\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n      console.log(\"message received!\");\n      if (msg.message.questions) {\n        this.setState({\n          questionsList: msg.message.questionsList,\n          questions: msg.message.questions,\n        },\n          () => { console.log(\"questions were updated\"); });\n      }\n\n      // Publish move to the opponent's board\n      else if (msg.message.judge) {\n        this.setState({\n          scores: msg.message.scores,\n          judgeMode: msg.message.judge === this.props.players[this.userIndex] ? false : this.state.judgeMode,\n        });\n\n        this.judgeCount++;\n        if (this.judgeCount === this.props.occupants) {\n          this.newRound();\n        }\n      }\n\n      else if (!msg.message.reset) {\n        this.publishMove(msg.message.answers, msg.message.answerers, msg.message.backlog, msg.message.judgeMode);\n      }\n\n      // Start a new game\n      else if (msg.message.reset) {\n        this.userIndex = this.props.players.indexOf(this.props.name);\n        this.targetIndex = this.userIndex + 1;\n        if (this.targetIndex >= this.props.players.length) {\n          this.targetIndex = 0;\n        }\n        var target = this.props.players[this.targetIndex];\n\n        this.setState({\n          target: target,\n\n          scores: Array(this.props.occupants).fill(0),\n          backlog: Array(this.props.occupants).fill(1),\n\n          questions: Array(this.props.occupants - 1).fill(\"q\"),\n          answers: Array(this.props.occupants).fill(Array(this.props.occupants - 1).fill(\"\")), // [player][answer]\n          answerers: Array(this.props.occupants).fill(Array(this.props.occupants - 1).fill(\"\")),\n\n          roundDone: false,\n          judgeMode: false,\n        });\n\n        this.gameOver = false;\n      }\n\n      // End the game and go back to the lobby\n      else if (msg.message.endGame) {\n        Swal.close();\n        this.props.endGame();\n      }\n    });\n  }\n\n  shuffleQuestionsList() {\n    var shuffledQuestionsList = [...questionsList];\n    for (let i = shuffledQuestionsList.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i)\n      const temp = shuffledQuestionsList[i]\n      shuffledQuestionsList[i] = shuffledQuestionsList[j]\n      shuffledQuestionsList[j] = temp\n    }\n    return shuffledQuestionsList;\n  }\n\n  nextTarget() { // !!! only use if you want to continue onMakeMove2 !!!\n    var oldTargetIndex = this.targetIndex;\n    // update target\n    this.targetIndex++;\n    if (this.targetIndex >= this.props.players.length) {\n      this.targetIndex = 0;\n    }\n    var target = this.props.players[this.targetIndex];\n\n    //update backlog (prev person+1, current person-1)\n    var backlog = this.state.backlog;\n    backlog[this.userIndex] = backlog[this.userIndex] - 1;\n    var prevIndex = this.userIndex - 1;\n    if (prevIndex < 0) {\n      prevIndex = this.props.players.length - 1;\n    }\n    if (oldTargetIndex !== prevIndex) { // dont add to prev person's backlog if they're getting their own back\n      backlog[prevIndex] = backlog[prevIndex] + 1;\n    }\n\n    var roundDone = false;\n    if (this.targetIndex === this.userIndex) {\n      roundDone = true;\n    }\n\n    var judgeMode = false;\n    if (backlog.every(item => item === 0)) {\n      judgeMode = true;\n    }\n\n    this.setState({\n      target: target,\n      backlog: backlog,\n      roundDone: roundDone,\n      judgeMode: judgeMode,\n    },\n      () => { console.log(\"setState completed\", this.state); this.onMakeMove2(); });\n  }\n\n  newRound() { // reset everything except questionsList and scores\n    this.userIndex = this.props.players.indexOf(this.props.name);\n    this.targetIndex = this.userIndex + 1;\n    if (this.targetIndex >= this.props.players.length) {\n      this.targetIndex = 0;\n    }\n    var target = this.props.players[this.targetIndex];\n\n    // create multidimensional arrays this way for an annoying reason\n    var rows = this.props.occupants; //players\n    var cols = this.props.occupants - 1; //answer blanks\n    var answers = [];\n    var answerers = [];\n\n    for (let i = 0; i < rows; i++) {\n      var answerBlanks = [];\n      var answererBlanks = [];\n      for (let j = 0; j < cols; j++) {\n        answerBlanks.push(\"\");\n        answererBlanks.push(\"\");\n      }\n      answers.push(answerBlanks);\n      answerers.push(answererBlanks);\n    }\n\n    var i = this.state.questionsList.indexOf(this.state.questions[this.state.questions.length - 1]);\n    var questions = this.state.questionsList.slice(i + 1, i + this.props.occupants);\n\n    this.setState({\n      target: target,\n      backlog: Array(this.props.occupants).fill(1),\n      questions: questions,\n      answers: answers, // [player][answer]\n      answerers: answerers,\n      roundDone: false,\n      judgeMode: false,\n    });\n\n    this.judgeCount = 0;\n  }\n\n  // checkForWinner() {\n  //   const winnerIndex = this.state.scores.findIndex(score => score >= 10);\n  //   if (winnerIndex >= 0) {\n  //     this.gameOver = true;\n  //     this.newRound(this.props.players[winnerIndex]);\n  //     // change state in order to rerender ?\n  //   }\n  // };\n\n  // Opponent's move is published to the board\n  publishMove = (updatedAnswers, updatedAnswerers, backlog, judgeMode) => {\n    this.setState({\n      answers: updatedAnswers,\n      answerers: updatedAnswerers,\n      backlog: backlog,\n      judgeMode: this.state.judgeMode || judgeMode,\n    });\n\n    // this.checkForWinner()\n  }\n\n  onMakeMove = (index, answer) => {\n    var answers = this.state.answers;\n    var answerers = this.state.answerers;\n    var backlog = this.state.backlog;\n    var targetIndex = this.targetIndex;\n\n    // Check if user has backlog field is empty\n    if (backlog[this.userIndex] > 0 && !answers[targetIndex][index]) {\n      answers[targetIndex][index] = (answer === \"\") ? \"no answer\" : answer;\n      answerers[targetIndex][index] = this.props.name;\n      this.setState({\n        answers: answers,\n        answerers: answerers\n      });\n      this.nextTarget();\n      // continued in onMakeMove2()\n    }\n  }\n\n  onMakeMove2() { //continuation of onMakeMove after setState finishes in nextTarget()\n    // Publish move to the channel\n    this.props.pubnub.publish({\n      message: {\n        answers: this.state.answers,\n        answerers: this.state.answerers,\n        backlog: this.state.backlog,\n        judgeMode: this.state.judgeMode,\n      },\n      channel: this.props.gameChannel\n    });\n  }\n\n  onGuess = (index, guess) => {\n    var scores = this.state.scores;\n    var answerer = this.state.answerers[this.userIndex][index];\n    var answererIndex = this.props.players.indexOf(answerer);\n    // increment answerer's score\n    scores[answererIndex] = scores[answererIndex] + 1;\n\n    // increment user's score if guess matches answerer\n    if (answerer === guess) {\n      scores[this.userIndex] = scores[this.userIndex] + 1;\n    }\n\n    // Publish move to the channel\n    this.props.pubnub.publish({\n      message: {\n        judge: this.props.players[this.userIndex],\n        scores: scores,\n      },\n      channel: this.props.gameChannel\n    });\n\n    // Check if there is a winner\n    // this.checkForWinner()\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <p style={{ display: \"inline\", fontSize: \"36px\" }}>{this.props.name}</p>&nbsp;&nbsp;&nbsp;&nbsp;\n          <p style={{ display: \"inline\" }}>Score: {this.state.scores[this.userIndex]}</p>\n          <p>Backlog: {this.state.backlog[this.userIndex]}</p>\n        </div>\n        {!this.state.judgeMode &&\n          <div className=\"board\">\n            <p style={{ fontSize: \"30px\", color: \"LightCoral\" }}>Target: {this.state.target}</p>\n            {(this.state.backlog[this.userIndex] !== 0 || this.state.roundDone) &&\n              <Board\n                roundDone={this.state.roundDone}\n                blanks={this.props.occupants - 1}\n                questions={this.state.questions}\n                answers={this.state.answers[this.targetIndex]}\n                onClick={(index, answer) => this.onMakeMove(index, answer)}\n                judgeMode={this.state.judgeMode}\n                players={this.props.players}\n              />\n            }\n            {this.state.backlog[this.userIndex] === 0 && !this.state.roundDone &&\n              <p>waiting...</p>\n            }\n          </div>\n        }\n        {this.state.judgeMode &&\n          <div className=\"board\">\n            <p style={{ fontSize: \"30px\", color: \"LightCoral\" }}>Target: {this.state.target}</p>\n            <Board\n              roundDone={false}\n              blanks={this.props.occupants - 1}\n              questions={this.state.questions}\n              answers={this.state.answers[this.targetIndex]}\n              onClick={(index, guess) => this.onGuess(index, guess)}\n              judgeMode={this.state.judgeMode}\n              players={this.props.players}\n            />\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport Game from './Game';\nimport PubNubReact from 'pubnub-react';\nimport Swal from \"sweetalert2\";\nimport shortid from 'shortid';\nimport './Game.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.pubnub = new PubNubReact({\n      publishKey: \"pub-c-5a45de7f-2d49-4913-a215-3a91b54a312e\",\n      subscribeKey: \"sub-c-065bec9c-9b29-11ea-8e71-f2b83ac9263d\"\n    });\n\n    this.state = {\n      name: \"\",\n      players: [],\n      isPlaying: false,\n      isRoomCreator: false,\n      createIsDisabled: false,\n      startIsDisabled: true,\n      gameChannel: null,\n\n      myTurn: false,\n    };\n\n    this.occupants = 0;\n    this.lobbyChannel = null;\n    this.roomId = null;\n    this.pubnub.init(this);\n  }\n\n  componentDidUpdate() {\n    if (this.lobbyChannel != null) {\n      this.pubnub.getMessage(this.lobbyChannel, (msg) => {\n        if (msg.message.name != null && this.state.isRoomCreator) {\n          var players = this.state.players;\n          players.push(msg.message.name);\n          this.occupants++;\n          var startIsDisabled = true;\n          if (this.occupants > 2) {\n            startIsDisabled = false;\n          }\n          this.setState({\n            startIsDisabled: startIsDisabled,\n            players: players\n          })\n        }\n        if (msg.message.start && msg.message.occupants >= 3) {\n          this.occupants = msg.message.occupants;\n          this.setState({\n            isPlaying: msg.message.start,\n            players: msg.message.players,\n            gameChannel: msg.message.gameChannel,\n          })\n          this.pubnub.subscribe({\n            channels: [msg.message.gameChannel],\n            connect : function(){\n              console.log(\"Connected\");\n            },\n          });\n        }\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.state.gameChannel]\n    });\n  }\n\n  // Create a room channel\n  onPressCreate = (e) => {\n    // Create a random name for the channel\n    this.roomId = shortid.generate().substring(0, 5);\n    this.lobbyChannel = 'tictactoelobby--' + this.roomId;\n    this.occupants++;\n    this.pubnub.subscribe({\n      channels: [this.lobbyChannel],\n      withPresence: true\n    });\n\n    //get name\n    Swal.fire({\n      position: 'top',\n      input: 'text',\n      allowOutsideClick: false,\n      inputPlaceholder: 'Enter your name',\n      showCancelButton: true,\n      confirmButtonColor: 'rgb(208,33,41)',\n      confirmButtonText: 'OK',\n      width: 275,\n      padding: '0.7em',\n      customClass: {\n        heightAuto: false,\n        popup: 'popup-class',\n        confirmButton: 'join-button-class',\n        cancelButton: 'join-button-class'\n      }\n    }).then((result) => {\n      // Check if the user typed a value in the input field\n      if (result.value) {\n        var players = this.state.players;\n        players.push(result.value);\n        this.setState({\n          name: result.value,\n          players: players,\n        })\n      }\n    })\n\n    this.setState({\n      isRoomCreator: true,\n      createIsDisabled: true, // Disable the 'Create' button\n      myTurn: true, // Room creator makes the 1st move\n    });\n  }\n\n  // The 'Join' button was pressed\n  onPressJoin = (e) => {\n    Swal.fire({\n      position: 'top',\n      input: 'text',\n      allowOutsideClick: false,\n      inputPlaceholder: 'Enter the room id',\n      showCancelButton: true,\n      confirmButtonColor: 'rgb(208,33,41)',\n      confirmButtonText: 'OK',\n      width: 275,\n      padding: '0.7em',\n      customClass: {\n        heightAuto: false,\n        popup: 'popup-class',\n        confirmButton: 'join-button-class',\n        cancelButton: 'join-button-class'\n      }\n    }).then((result) => {\n      // Check if the user typed a value in the input field\n      if (result.value) {\n        this.joinRoom(result.value);\n      }\n    })\n  }\n\n  // Join a room channel\n  joinRoom = (value) => {\n    this.roomId = value;\n    this.lobbyChannel = 'tictactoelobby--' + this.roomId;\n\n    // Check the number of people in the channel (DEBUG)\n    // this.pubnub.hereNow({\n    //   channels: [this.lobbyChannel],\n    // }).then((response) => {\n    //   //console.log(response.totalOccupancy);\n    //   var people = response.totalOccupancy;\n    //   if (people < 4) {\n    //     if (people > 2) {\n    //       var startIsDisabled = false;\n    //     }\n\n    //     this.setState({\n    //       startIsDisabled: startIsDisabled,\n    //     })\n        this.pubnub.subscribe({\n          channels: [this.lobbyChannel],\n          withPresence: true\n        });\n\n        //get name\n        Swal.fire({\n          position: 'top',\n          input: 'text',\n          allowOutsideClick: false,\n          inputPlaceholder: 'Enter your name',\n          showCancelButton: true,\n          confirmButtonColor: 'rgb(208,33,41)',\n          confirmButtonText: 'OK',\n          width: 275,\n          padding: '0.7em',\n          customClass: {\n            heightAuto: false,\n            popup: 'popup-class',\n            confirmButton: 'join-button-class',\n            cancelButton: 'join-button-class'\n          }\n        }).then((result) => {\n          // Check if the user typed a value in the input field\n          if (result.value) {\n            this.setState({\n              name: result.value,\n            })\n            this.pubnub.publish({\n              message: {\n                name: result.value,\n              },\n              channel: this.lobbyChannel\n            });\n          }\n        })\n      //}\n      // else {\n      //   // Game in progress\n      //   Swal.fire({\n      //     position: 'top',\n      //     allowOutsideClick: false,\n      //     title: 'Error',\n      //     text: 'Game in progress. Try another room.',\n      //     width: 275,\n      //     padding: '0.7em',\n      //     customClass: {\n      //       heightAuto: false,\n      //       title: 'title-class',\n      //       popup: 'popup-class',\n      //       confirmButton: 'button-class'\n      //     }\n      //   })\n      // }\n    // }).catch((error) => {\n    //   console.log(error);\n    // });\n  }\n\n  onPressStart = (e) => {\n    // Check that the player is connected to a channel\n    if (this.lobbyChannel != null) {\n      // Create a different channel for the game\n      var gameChannel = 'tictactoegame--' + this.roomId;\n\n      this.pubnub.publish({\n        message: {\n          start: true,\n          occupants: this.occupants,\n          players: this.state.players,\n          gameChannel: gameChannel\n        },\n        channel: this.lobbyChannel\n      });\n\n      this.pubnub.subscribe({\n        channels: [gameChannel]\n      });\n\n      this.setState({\n        isPlaying: true,\n        gameChannel: gameChannel,\n      });\n\n      // Close the modals if they are opened\n      Swal.close();\n    }\n  }\n\n  // Reset everything\n  endGame = () => {\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.state.gameChannel]\n    });\n\n    this.setState({\n      name: \"\",\n      players: [],\n      isPlaying: false,\n      isRoomCreator: false,\n      createIsDisabled: false,\n      startIsDisabled: true,\n      gameChannel: null,\n\n      myTurn: false,\n    });\n\n    this.occupants = 0;\n    this.lobbyChannel = null;\n    this.roomId = null;\n    this.pubnub.init(this);\n  }\n\n  render() {\n    return (\n      <div>\n        {!this.state.isPlaying &&\n          <div className=\"lobby\">\n            <p>Share this room ID with your friends: {this.roomId}</p>\n            <div>\n              { // no room id yet -> create or join\n                !this.roomId &&\n                <div className=\"button-container\">\n                  <button\n                    className=\"create-button\"\n                    disabled={this.state.createIsDisabled}\n                    onClick={(e) => this.onPressCreate()}\n                  > Create\n                  </button>\n                  <button\n                    className=\"join-button\"\n                    onClick={(e) => this.onPressJoin()}\n                  > Join\n                  </button>\n                </div>\n              }\n\n              { // created game and waiting for people to join\n                this.roomId && this.state.isRoomCreator &&\n                <div className=\"button-container\">\n                  <button\n                    className=\"join-button\"\n                    disabled={this.state.startIsDisabled}\n                    onClick={(e) => this.onPressStart()}\n                  > Start\n                  </button>\n                  {this.state.players.map((player, i) => <p key={i}>{player}</p>)}\n                </div>\n              }\n\n              { // waiting for roomCreator to start\n                this.roomId != null && !this.state.isRoomCreator &&\n                <div>\n                  <p>Hi, {this.state.name}!</p>\n                  <p>waiting for room creator to start...</p>\n                </div>\n              }\n            </div>\n          </div>\n        }\n\n        {this.state.isPlaying &&\n          <Game\n            pubnub={this.pubnub}\n            gameChannel={this.state.gameChannel}\n            name={this.state.name}\n            players={this.state.players}\n            occupants={this.occupants}\n            isRoomCreator={this.state.isRoomCreator}\n            myTurn={this.state.myTurn}\n            endGame={this.endGame}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}