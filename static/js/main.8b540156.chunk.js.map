{"version":3,"sources":["Form.js","Board.js","Game.js","App.js","index.js"],"names":["Form","props","state","value","judgeMode","players","handleChange","bind","handleSubmit","event","this","setState","target","preventDefault","onClick","className","onSubmit","refresh","style","display","color","onQuestionRefresh","question","maxWidth","type","placeholder","onChange","backgroundColor","marginTop","marginBottom","fontWeight","answer","map","player","key","React","Component","colors","Board","row","board","i","columns","push","renderSquare","answers","roundDone","questions","length","createBoard","blanks","Game","onMakeMove","index","backlog","userIndex","targetIndex","oldTargetIndex","pubnub","publish","message","name","channel","gameChannel","onGuess","guess","answerer","answerers","answererIndex","indexOf","judge","user","correctGuess","QLIndex","questionsList","endIndex","oldIndex","newIndex","onWin","winners","title","join","isRoomCreator","Swal","fire","position","allowOutsideClick","text","showCancelButton","confirmButtonColor","cancelButtonColor","cancelButtonText","confirmButtonText","width","customClass","heightAuto","widthAuto","then","result","reset","endGame","rows","occupants","cols","answerBlanks","answererBlanks","j","shuffledQuestionsList","shuffleQuestionsList","slice","scores","Array","fill","judgeCount","madeMove","getMessage","msg","splice","maxScore","Math","max","winningScore","newRound","prevIndex","every","item","console","log","close","fetchMessages","channels","count","status","response","floor","random","temp","restart","reverse","fontSize","marginLeft","App","onCreate","e","roomId","shortid","generate","substring","lobbyChannel","subscribe","withPresence","input","inputValue","window","localStorage","getItem","padding","setItem","unsubscribe","onPressJoin","inputPlaceholder","joinRoom","onPressStart","loading","startIsDisabled","start","onPressRemove","removedPlayer","isPlaying","PubNubReact","publishKey","subscribeKey","init","addListener","includes","getPresence","presence","action","margin","textAlign","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8b540156.chunk.js","sourcesContent":["import React from 'react';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: this.props.judgeMode ? this.props.players[0] : \"\" };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.onClick(this.state.value);\n    this.setState({ value: this.props.judgeMode ? this.props.players[0] : \"\" });\n  }\n\n  render() {\n    return (\n      <div>\n        {!this.props.judgeMode &&\n          <form className=\"ui form\" onSubmit={this.handleSubmit}>\n            <div className=\"field\">\n              <label>\n                {this.props.refresh && <i style={{ display: \"inline\", color: \"#40A4DB\" }} className=\"redo icon\" onClick={() => this.props.onQuestionRefresh()}></i>}&nbsp;\n                {this.props.question}:\n              </label>\n              <div className=\"ui action input\" style={{ maxWidth: \"500px\" }}>\n                <input className=\"ui input\" type=\"text\" placeholder=\"answer\" value={this.state.value} onChange={this.handleChange} />\n                <button className=\"ui button\" style={{ backgroundColor: this.props.color }} value=\"Submit\">Submit</button>\n              </div>\n            </div>\n          </form>\n        }\n        {this.props.judgeMode &&\n          <form className=\"ui form\" onSubmit={this.handleSubmit}>\n            <label style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\n              <p style={{ display: \"inline\", fontWeight: \"bold\" }}>{this.props.question}:</p>&nbsp;\n                  <p style={{ display: \"inline\", fontWeight: \"bold\", color: \"#40A4DB\" }}>{this.props.answer}</p>\n            </label>\n            <div className=\"inline fields\">\n              <div className=\"field\">\n                <select className=\"ui selection dropdown\" value={this.state.value} onChange={this.handleChange}>\n                  {this.props.players.map((player) => <option key={player} value={player}>{player}</option>)}\n                </select>\n              </div>\n              <div className=\"field\">\n                <input className=\"ui button\" style={{ backgroundColor: this.props.color }} type=\"submit\" value=\"Submit\" />\n              </div>\n            </div>\n          </form>\n        }\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React from 'react';\nimport Form from './Form';\nconst colors = ['#40A4DB','#33BEB8','#B2C225','#FECC30','#F9A228','#F6621F','#DB3838','#EE657A','#A363DA'];\n\nclass Board extends React.Component {\n\n  createBoard(row) {\n    const board = [];\n\n    for (let i = 0; i < row; i++) {\n      const columns = [];\n      columns.push(this.renderSquare(i));\n      board.push(<div key={i}>{columns}</div>);\n    }\n\n    return board;\n  }\n\n  renderSquare(i) {\n    return (\n      <div style={{ marginBottom: \"10px\"}} key={i}>\n        {((this.props.answers[i] === \"\" && !this.props.roundDone) || this.props.judgeMode) &&\n          <Form\n            judgeMode={this.props.judgeMode}\n            players={this.props.players}\n            question={this.props.questions[i]}\n            answer={this.props.answers[i]}\n            onClick={(value) => this.props.onClick(i, value)}\n            onQuestionRefresh={() => this.props.onQuestionRefresh(i)}\n            refresh={this.props.refresh}\n            color={(i >= 0 && i < colors.length) ? colors[i] : '#dddddd'} />\n        }\n        {((this.props.answers[i] !== \"\" && !this.props.judgeMode) || (this.props.roundDone && !this.props.judgeMode)) &&\n          <div>\n            <p style={{ display: \"inline\" }}>{this.props.questions[i]}:</p>&nbsp;\n          <p style={{ display: \"inline\", color: \"CornflowerBlue\" }}>{this.props.answers[i]}</p>\n          </div>\n        }\n      </div>\n    );\n  }\n\n  render() {\n    return <div>{this.createBoard(this.props.blanks)}</div>;\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport Board from './Board';\nimport Swal from \"sweetalert2\";\nimport questionsList from './questions.json';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.userIndex = this.props.players.indexOf(this.props.name);\n    this.targetIndex = this.userIndex + 1;\n    if (this.targetIndex >= this.props.players.length) {\n      this.targetIndex = 0;\n    }\n    var target = this.props.players[this.targetIndex];\n\n    // create multidimensional arrays this way for an annoying reason\n    var rows = this.props.occupants; //num of players\n    var cols = this.props.occupants - 1; //answer blanks\n    var answers = [];\n    var answerers = [];\n\n    for (let i = 0; i < rows; i++) {\n      var answerBlanks = [];\n      var answererBlanks = [];\n      for (let j = 0; j < cols; j++) {\n        answerBlanks.push(\"\");\n        answererBlanks.push(\"\");\n      }\n      answers.push(answerBlanks);\n      answerers.push(answererBlanks);\n    }\n\n    var questions = [];\n    var shuffledQuestionsList = [];\n    if (this.props.isRoomCreator) {\n      shuffledQuestionsList = this.shuffleQuestionsList();\n      questions = shuffledQuestionsList.slice(0, this.props.occupants - 1);\n      this.props.pubnub.publish({\n        message: {\n          questionsList: shuffledQuestionsList,\n          questions: questions,\n        },\n        channel: this.props.gameChannel\n      });\n    }\n\n    this.state = {\n      target: target,\n\n      scores: Array(this.props.occupants).fill(0),\n      backlog: Array(this.props.occupants).fill(1),\n\n      questionsList: shuffledQuestionsList,\n      questions: questions,\n      answers: answers, // [player][answer]\n      answerers: answerers,\n\n      roundDone: false,\n      judgeMode: false,\n    };\n\n    this.judgeCount = 0;\n    this.players = this.props.players;\n    this.madeMove = false;\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n      // set questions\n      if (msg.message.questions) {\n        this.setState({\n          questionsList: msg.message.questionsList,\n          questions: msg.message.questions,\n        });\n      }\n\n      //refresh question\n      if (msg.message.newIndex) {\n        this.setState((state) => {\n          var questionsList = state.questionsList;\n          var questions = state.questions;\n          //replace old index and delete the new question\n          questionsList[msg.message.oldIndex] = questionsList[msg.message.newIndex];\n          //remove the original new question so it's not used twice\n          questionsList.splice(msg.message.newIndex, 1);\n          //replace question in currently used questions\n          questions[msg.message.i] = questionsList[msg.message.oldIndex];\n          return {\n            questionsList: questionsList,\n            questions: questions\n          };\n        });\n      }\n\n      // update scores / done judging? / new round?\n      else if (msg.message.judge) {\n        this.madeMove = false; //reset madeMove here since questions visibility relies on it after submitting guess\n        this.judgeCount++;\n        var winners = [];\n\n        this.setState((state) => {\n          var scores = state.scores;\n          scores[msg.message.answererIndex] = scores[msg.message.answererIndex] + 1;\n          if (msg.message.correctGuess) {\n            scores[msg.message.user] = scores[msg.message.user] + 1;\n          }\n          //check for winner if round is done (with updated scores)\n          if (this.judgeCount === this.props.occupants) {\n            var maxScore = Math.max(...scores);\n            if (maxScore >= this.props.winningScore) {\n              for (let i = 0; i < scores.length; i++) {\n                if (scores[i] === maxScore) {\n                  winners.push(this.players[i]);\n                }\n              }\n            }\n          }\n          return {\n            scores: scores,\n            judgeMode: msg.message.judge === this.players[this.userIndex] ? false : state.judgeMode\n          };\n        });\n\n        //if there is a winner\n        if (winners.length !== 0) {\n          this.onWin(winners);\n        }\n        else if (this.judgeCount === this.props.occupants) {\n          this.newRound(false);\n        }\n      }\n\n      // someone 'made move' aka answered a question\n      else if (!msg.message.reset && msg.message.name) {\n        this.madeMove = true;\n        this.setState((state) => {\n          var backlog = state.backlog;\n          var answers = state.answers;\n          var answerers = state.answerers;\n          answers[msg.message.oldTargetIndex][msg.message.index] = (msg.message.answer === \"\") ? \"no answer\" : msg.message.answer;\n          answerers[msg.message.oldTargetIndex][msg.message.index] = msg.message.name;\n\n          //update backlog (prev person+1, current person-1)\n          backlog[msg.message.userIndex] = backlog[msg.message.userIndex] <= 0 ? 0 : backlog[msg.message.userIndex] - 1;\n          var prevIndex = msg.message.userIndex - 1;\n          if (prevIndex < 0) {\n            prevIndex = this.players.length - 1;\n          }\n          if (msg.message.oldTargetIndex !== prevIndex) { // dont add to prev person's backlog if they're getting their own back\n            backlog[prevIndex] = backlog[prevIndex] + 1;\n          }\n\n          var judgeMode = false;\n          if (backlog.every(item => item === 0)) {\n            judgeMode = true;\n          }\n\n          console.log(answers);\n\n          return {\n            answers: answers,\n            answerers: answerers,\n            backlog: backlog,\n            judgeMode: state.judgeMode || judgeMode\n          };\n        });\n      }\n\n      // Start a new game\n      else if (msg.message.reset) {\n        Swal.close();\n        this.newRound(true);\n      }\n\n      // End the game and go back to the lobby\n      else if (msg.message.endGame) {\n        Swal.close();\n        this.props.endGame();\n      }\n    });\n\n    //check for missed messages on mount\n    if (!this.props.isRoomCreator) {\n      this.props.pubnub.fetchMessages(\n        {\n          channels: [this.props.gameChannel],\n          count: 1\n        },\n        (status, response) => {\n          console.log(\"last message was...\", response);\n          for (var channel in response.channels) {\n            var message = response.channels[channel][0].message;\n            if (message.questions) {\n              console.log(\"MISSED QUESTIONS PUBLISH\");\n              this.setState({\n                questionsList: message.questionsList,\n                questions: message.questions,\n              });\n            }\n          }\n        }\n      )\n    }\n  }\n\n  shuffleQuestionsList() {\n    var shuffledQuestionsList = [...questionsList];\n    for (let i = shuffledQuestionsList.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i)\n      const temp = shuffledQuestionsList[i]\n      shuffledQuestionsList[i] = shuffledQuestionsList[j]\n      shuffledQuestionsList[j] = temp\n    }\n    return shuffledQuestionsList;\n  }\n\n  onMakeMove = (index, answer) => {\n    // Check if user has backlog & field is empty\n    if (this.state.backlog[this.userIndex] > 0 && !this.state.answers[this.targetIndex][index]) {\n      //next target\n      var oldTargetIndex = this.targetIndex;\n      // update target\n      this.targetIndex++;\n      if (this.targetIndex >= this.players.length) {\n        this.targetIndex = 0;\n      }\n      var target = this.players[this.targetIndex];\n      var roundDone = false;\n      if (this.targetIndex === this.userIndex) {\n        roundDone = true;\n      }\n      this.setState({\n        target: target,\n        roundDone: roundDone,\n      });\n\n      this.props.pubnub.publish({\n        message: {\n          oldTargetIndex: oldTargetIndex,\n          index: index,\n          answer: answer,\n          name: this.props.name,\n          userIndex: this.userIndex,\n        },\n        channel: this.props.gameChannel\n      });\n    }\n  }\n\n  onGuess = (index, guess) => {\n    var answerer = this.state.answerers[this.userIndex][index];\n    var answererIndex = this.players.indexOf(answerer);\n\n    // Publish move to the channel\n    this.props.pubnub.publish({\n      message: {\n        judge: this.players[this.userIndex],\n        user: this.userIndex,\n        answererIndex: answererIndex,\n        correctGuess: (answerer === guess)\n      },\n      channel: this.props.gameChannel\n    });\n  }\n\n  newRound(restart) { // reset everything except questionsList, reverse players/scores & update user index\n    this.judgeCount = 0;\n    this.madeMove = false;\n    this.players = this.players.reverse();\n    this.userIndex = this.players.indexOf(this.props.name);\n    this.targetIndex = this.userIndex + 1;\n    if (this.targetIndex >= this.players.length) {\n      this.targetIndex = 0;\n    }\n    var target = this.players[this.targetIndex];\n\n    // create multidimensional arrays this way for an annoying reason\n    var rows = this.props.occupants; //number of players\n    var cols = this.props.occupants - 1; //answer blanks\n    var answers = [];\n    var answerers = [];\n\n    for (let i = 0; i < rows; i++) {\n      var answerBlanks = [];\n      var answererBlanks = [];\n      for (let j = 0; j < cols; j++) {\n        answerBlanks.push(\"\");\n        answererBlanks.push(\"\");\n      }\n      answers.push(answerBlanks);\n      answerers.push(answererBlanks);\n    }\n\n    // index of the last current question in the questionsList\n    var i = this.state.questionsList.indexOf(this.state.questions[this.state.questions.length - 1]);\n\n    var questions = [];\n    // if there's enough items in questionList to make a set of questions\n    if (i + this.props.occupants < this.state.questionsList.length) {\n      questions = this.state.questionsList.slice(i + 1, i + this.props.occupants);\n    }\n    // else use the rest of the questions and go back to start of questionsList\n    else {\n      questions = this.state.questionsList.slice(i + 1,);\n      for (let i = 0; questions.length < this.props.occupants - 1; i++) {\n        questions.push(this.state.questionsList[i]);\n      }\n    }\n\n    this.setState((state) => {\n      return {\n        target: target,\n        scores: restart ? Array(this.props.occupants).fill(0) : state.scores.reverse(),\n        backlog: Array(this.props.occupants).fill(1),\n        questions: questions,\n        answers: answers, // [player][answer]\n        answerers: answerers,\n        roundDone: false,\n        judgeMode: false,\n      };\n    });\n  }\n\n  onQuestionRefresh = (i) => { // for when room creator wants to switch out a question\n    // index of the question in the questionsList\n    var QLIndex = this.state.questionsList.indexOf(this.state.questions[i]);\n    // index of last [question] in questionsList\n    var endIndex = this.state.questionsList.indexOf(this.state.questions[this.state.questions.length - 1]);\n    // if the next unused index in questionsList exists (aka if we didn't go through the entire questionsList)\n    if (endIndex + 1 < this.state.questionsList.length) {\n      this.props.pubnub.publish({\n        message: {\n          i: i,\n          oldIndex: QLIndex,\n          newIndex: endIndex + 1,\n        },\n        channel: this.props.gameChannel\n      });\n    }\n  }\n\n  onWin = (winners) => {\n    let title = (winners.length > 1) ? `Tie! Winners are ${winners.join(', ')}` : `${winners[0]} wins!`;\n    // pop up for room creator\n    if (this.props.isRoomCreator) {\n      Swal.fire({\n        position: 'top',\n        allowOutsideClick: false,\n        title: title,\n        text: 'New Round?',\n        showCancelButton: true,\n        confirmButtonColor: 'rgb(208,33,41)',\n        cancelButtonColor: '#aaa',\n        cancelButtonText: 'Nope',\n        confirmButtonText: 'Yea!',\n        width: 275,\n        customClass: {\n          heightAuto: true,\n          widthAuto: true,\n        },\n      }).then((result) => {\n        // Start a new round\n        if (result.value) {\n          this.props.pubnub.publish({\n            message: {\n              reset: true\n            },\n            channel: this.props.gameChannel\n          });\n        }\n        else {\n          // End the game\n          this.props.pubnub.publish({\n            message: {\n              endGame: true\n            },\n            channel: this.props.gameChannel\n          });\n        }\n      })\n    }\n\n    //else if not room creator\n    else {\n      Swal.fire({\n        position: 'top',\n        allowOutsideClick: false,\n        title: title,\n        text: 'Waiting for room creator to start a new round...',\n        confirmButtonColor: 'rgb(208,33,41)',\n        width: 275,\n        customClass: {\n          heightAuto: true,\n          widthAuto: true,\n        },\n      });\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div>\n          <p style={{ display: \"inline\", fontSize: \"26px\" }}>{this.props.name}</p>&nbsp;&nbsp;&nbsp;&nbsp;\n          <p style={{ display: \"inline\" }}>Score: {this.state.scores[this.userIndex]}</p>\n          {this.state.scores[this.userIndex] >= this.props.winningScore && <i className=\"trophy icon\" style={{ marginLeft: \"10px\", color: \"#FECC30\" }} />}&nbsp;&nbsp;&nbsp;&nbsp;\n          <p style={{ display: \"inline\" }}>Backlog: {this.state.backlog[this.userIndex]}</p>\n        </div>\n        {!this.state.judgeMode &&\n          <div >\n            <p style={{ fontSize: \"20px\", color: \"#DB3838\", marginTop: \"15px\", marginBottom: \"10px\" }}>Target: {this.state.target}</p>\n            {(this.state.backlog[this.userIndex] !== 0 || !this.madeMove) &&\n              <Board\n                roundDone={this.state.roundDone}\n                blanks={this.props.occupants - 1}\n                questions={this.state.questions}\n                answers={this.state.answers[this.targetIndex]}\n                onClick={(index, answer) => this.onMakeMove(index, answer)}\n                judgeMode={this.state.judgeMode}\n                players={this.players}\n                onQuestionRefresh={(i) => this.onQuestionRefresh(i)}\n                refresh={this.props.isRoomCreator && !this.madeMove}\n              />\n            }\n            {this.state.backlog[this.userIndex] === 0 && this.madeMove && //includes if you're waiting for your own sheet back\n              <p>waiting...</p>\n            }\n          </div>\n        }\n        {this.state.judgeMode &&\n          <div >\n            <p style={{ fontSize: \"20px\", color: \"#DB3838\", marginTop: \"30px\", marginBottom: \"10px\" }}>Guess who wrote your fav answer</p>\n            <Board\n              roundDone={false}\n              blanks={this.props.occupants - 1}\n              questions={this.state.questions}\n              answers={this.state.answers[this.targetIndex]}\n              onClick={(index, guess) => this.onGuess(index, guess)}\n              judgeMode={this.state.judgeMode}\n              players={this.players}\n              refresh={false}\n            />\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport Game from './Game';\nimport PubNubReact from 'pubnub-react';\nimport Swal from \"sweetalert2\";\nimport shortid from 'shortid';\nimport './Game.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.pubnub = new PubNubReact({\n      publishKey: \"pub-c-5a45de7f-2d49-4913-a215-3a91b54a312e\",\n      subscribeKey: \"sub-c-065bec9c-9b29-11ea-8e71-f2b83ac9263d\"\n    });\n\n    this.state = {\n      name: \"\",\n      players: [],\n      isPlaying: false,\n      isRoomCreator: false,\n      startIsDisabled: true,\n      gameChannel: null,\n      winningScore: 8,\n    };\n\n    this.occupants = 0;\n    this.lobbyChannel = null;\n    this.roomId = null;\n    this.loading = false;\n    this.pubnub.init(this);\n\n    this.pubnub.addListener({\n      message: function (msg) {\n        console.log(\"listener: message in \", msg.channel, msg.message);\n      }\n    })\n  }\n\n  componentDidUpdate() {\n    if (this.lobbyChannel != null) {\n      this.pubnub.getMessage(this.lobbyChannel, (msg) => {\n\n        // someone joined the lobby\n        if (msg.message.name != null && this.state.isRoomCreator && !this.state.isPlaying) {\n          if (!this.state.players.includes(msg.message.name)) {\n            if (this.occupants <= 10) {\n              this.occupants++;\n              var startIsDisabled = true;\n              if (this.occupants > 2) {\n                startIsDisabled = false;\n              }\n              this.setState((state) => {\n                var players = state.players;\n                players.push(msg.message.name);\n                return {\n                  startIsDisabled: startIsDisabled,\n                  players: players\n                };\n              })\n            }\n          }\n        }\n\n        //start game\n        if (msg.message.start && msg.message.occupants >= 3 && msg.message.occupants <= 10) {\n          if (msg.message.players.includes(this.state.name)) {\n            this.occupants = msg.message.occupants;\n            this.pubnub.subscribe({\n              channels: [msg.message.gameChannel],\n              withPresence: true,\n            });\n            this.setState({\n              players: msg.message.players,\n              gameChannel: msg.message.gameChannel,\n              winningScore: msg.message.winningScore,\n            })\n          } else {\n            this.pubnub.unsubscribe({\n              channels: [this.lobbyChannel]\n            });\n          }\n        }\n\n        //check removed player\n        if (msg.message.removedPlayer) {\n          if (msg.message.removedPlayer === this.state.name) {\n            this.pubnub.unsubscribe({\n              channels: [this.lobbyChannel]\n            });\n\n            this.lobbyChannel = null;\n            this.roomId = null;\n\n            this.setState({\n              name: \"\",\n              gameChannel: null,\n            });\n          }\n        }\n      });\n    }\n\n    //joined the game\n    if (this.state.gameChannel != null) {\n      this.pubnub.getPresence(this.state.gameChannel, presence => {\n        if (presence.action === \"join\") {\n          this.loading = false;\n          this.setState({\n            isPlaying: true,\n          });\n        }\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.state.gameChannel]\n    });\n  }\n\n  // Create a room channel\n  onCreate = (e) => {\n    // Create a random name for the channel\n    this.roomId = shortid.generate().substring(0, 5);\n    this.lobbyChannel = 'tictactoelobby--' + this.roomId;\n    this.occupants = 1;\n    this.pubnub.subscribe({\n      channels: [this.lobbyChannel],\n      withPresence: true\n    });\n\n    //get name\n    Swal.fire({\n      position: 'top',\n      input: 'text',\n      inputValue: window.localStorage.getItem('player') ?? \"\",\n      allowOutsideClick: false,\n      title: 'Enter your name',\n      showCancelButton: true,\n      confirmButtonColor: 'rgb(208,33,41)',\n      confirmButtonText: 'OK',\n      width: 275,\n      padding: '0.7em',\n      customClass: {\n        heightAuto: true,\n        widthAuto: true,\n      }\n    }).then((result) => {\n      // Check if the user typed a value in the input field\n      if (result.value) {\n        var players = [];\n        players.push(result.value);\n        window.localStorage.setItem('player', result.value);\n\n        this.setState({\n          name: result.value,\n          players: players,\n          isRoomCreator: true,\n        })\n      } else {\n        this.pubnub.unsubscribe({\n          channels: [this.lobbyChannel]\n        });\n        this.roomId = null;\n        this.lobbyChannel = null;\n        this.occupants = 0;\n      }\n    })\n  }\n\n  // The 'Join' button was pressed\n  onPressJoin = (e) => {\n    Swal.fire({\n      position: 'top',\n      input: 'text',\n      allowOutsideClick: false,\n      inputPlaceholder: 'Enter the room id',\n      showCancelButton: true,\n      confirmButtonColor: 'rgb(208,33,41)',\n      confirmButtonText: 'OK',\n      width: 275,\n      padding: '0.7em',\n      customClass: {\n        heightAuto: true,\n        widthAuto: true,\n      }\n    }).then((result) => {\n      // Check if the user typed a value in the input field\n      if (result.value) {\n        this.joinRoom(result.value);\n      }\n    })\n  }\n\n  // Join a room channel\n  joinRoom = (value) => {\n    this.roomId = value;\n    this.lobbyChannel = 'tictactoelobby--' + this.roomId;\n\n    this.pubnub.subscribe({\n      channels: [this.lobbyChannel],\n      withPresence: true\n    });\n\n    //get name\n    Swal.fire({\n      position: 'top',\n      input: 'text',\n      title: 'Enter your name',\n      inputValue: window.localStorage.getItem('player') ?? \"\",\n      allowOutsideClick: false,\n      inputPlaceholder: 'Enter your name',\n      showCancelButton: true,\n      confirmButtonColor: 'rgb(208,33,41)',\n      confirmButtonText: 'OK',\n      width: 275,\n      padding: '0.7em',\n      customClass: {\n        heightAuto: true,\n        widthAuto: true,\n      }\n    }).then((result) => {\n      // Check if the user typed a value in the input field\n      if (result.value) {\n        window.localStorage.setItem('player', result.value);\n\n        this.setState({\n          name: result.value,\n        })\n        this.pubnub.publish({\n          message: {\n            name: result.value,\n          },\n          channel: this.lobbyChannel\n        });\n      } else {\n        this.pubnub.unsubscribe({\n          channels: [this.lobbyChannel]\n        });\n      }\n    })\n  }\n\n  onPressStart = (e) => {\n    // Check that the player is connected to a channel\n    if (this.lobbyChannel != null) {\n      this.loading = true;\n\n      this.setState({\n        startIsDisabled: true,\n      });\n\n      // Create a different channel for the game\n      var gameChannel = 'tictactoegame--' + this.roomId;\n\n      this.pubnub.publish({\n        message: {\n          start: true,\n          occupants: this.occupants,\n          players: this.state.players,\n          gameChannel: gameChannel,\n          winningScore: this.state.winningScore,\n        },\n        channel: this.lobbyChannel\n      });\n\n      // Close the modals if they are opened\n      Swal.close();\n    }\n  }\n\n  onPressRemove = (player) => {\n    this.occupants--;\n    var startIsDisabled = false;\n    if (this.occupants < 3) {\n      startIsDisabled = true;\n    }\n\n    this.pubnub.publish({\n      message: {\n        removedPlayer: player\n      },\n      channel: this.lobbyChannel\n    });\n\n    this.setState((state) => {\n      var players = state.players;\n      players.splice(state.players.indexOf(player), 1);\n      return {\n        startIsDisabled: startIsDisabled,\n        players: players\n      };\n    })\n  }\n\n  // Reset everything\n  endGame = () => {\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.state.gameChannel]\n    });\n\n    this.occupants = 0;\n    this.lobbyChannel = null;\n    this.roomId = null;\n    this.loading = false;\n\n    this.setState({\n      name: \"\",\n      players: [],\n      isPlaying: false,\n      isRoomCreator: false,\n      startIsDisabled: true,\n      gameChannel: null,\n      winningScore: 8,\n    });\n  }\n\n  //for winning score change\n  handleChange = (event) => {\n    this.setState({ winningScore: event.target.value });\n  }\n\n  render() {\n    return (\n      <div>\n        {!this.state.isPlaying &&\n          <div className=\"lobby\">\n            <h1 style={{ margin: \"auto\", marginBottom: \"30px\" }}>\n              <div style={{ display: \"inline\" }}>Truth Bomb </div>\n              <i style={{ display: \"inline\" }} className=\"bomb icon\"></i>\n            </h1>\n            {this.roomId && <p style={{ margin: \"auto\", marginBottom: \"15px\" }}>Share this room ID with your friends: {this.roomId}</p>}\n            <div style={{ margin: \"auto\" }}>\n              { // no room id yet -> create or join\n                !this.roomId &&\n                <div className=\"ui buttons\">\n                  <button\n                    className=\"ui button\"\n                    style={{ width: \"90px\" }}\n                    onClick={(e) => this.onCreate()}\n                  > Create\n                  </button>\n                  <div className=\"or\"></div>\n                  <button\n                    className=\"ui button\"\n                    style={{ width: \"90px\" }}\n                    onClick={(e) => this.onPressJoin()}\n                  > Join\n                  </button>\n                </div>\n              }\n\n              { // created game and waiting for people to join\n                this.roomId && this.state.isRoomCreator &&\n                <div style={{ margin: \"auto\", textAlign: \"center\" }}>\n                  <label>Points to win: </label>\n                  <select style={{ marginBottom: \"15px\" }} value={this.state.winningScore} onChange={this.handleChange}>\n                    {[2, 5, 8, 10, 15, 20].map((value) => <option key={value} value={value}>{value}</option>)}\n                  </select>\n                  <br />\n                  <button\n                    className=\"ui button\"\n                    style={{ marginBottom: \"15px\" }}\n                    disabled={this.state.startIsDisabled}\n                    onClick={(e) => this.onPressStart()}>\n                    {this.loading && <i className=\"spinner loading icon\" style={{ margin: \"auto\" }} />}\n                    {!this.loading && 'Start'}\n                  </button>\n                  {this.state.players.map((player, i) =>\n                    <div style={{ textAlign: \"left\" }} key={i}>\n                      {player !== this.state.name && <i style={{ display: \"inline\" }} className=\"red close icon\" onClick={(e) => this.onPressRemove(player)}></i>}\n                      <p style={{ display: \"inline\" }}>{player}</p>\n                    </div>\n                  )}\n                </div>\n              }\n\n              { // waiting for roomCreator to start\n                this.roomId != null && !this.state.isRoomCreator &&\n                <div>\n                  <p style={{ textAlign: \"center\" }}>Hi, {this.state.name}!</p>\n                  <p style={{ textAlign: \"center\" }}>waiting for room creator to start...</p>\n                </div>\n              }\n            </div>\n          </div>\n        }\n\n        {this.state.isPlaying &&\n          <Game\n            pubnub={this.pubnub}\n            gameChannel={this.state.gameChannel}\n            name={this.state.name}\n            players={this.state.players}\n            occupants={this.occupants}\n            isRoomCreator={this.state.isRoomCreator}\n            endGame={this.endGame}\n            winningScore={this.state.winningScore}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}