{"version":3,"sources":["Form.js","Board.js","Game.js","App.js","index.js"],"names":["Form","props","state","value","judgeMode","players","handleChange","bind","handleSubmit","event","this","setState","target","preventDefault","onClick","className","onSubmit","question","style","maxWidth","type","placeholder","onChange","marginTop","marginBottom","display","fontWeight","color","answer","map","player","key","React","Component","Board","row","board","cellCounter","i","columns","push","renderSquare","answers","roundDone","questions","createBoard","blanks","Game","onMakeMove","index","backlog","userIndex","targetIndex","oldTargetIndex","length","pubnub","publish","message","name","channel","gameChannel","onGuess","guess","answerer","answerers","answererIndex","indexOf","correctGuess","judge","user","rows","occupants","cols","answerBlanks","answererBlanks","j","shuffledQuestionsList","isRoomCreator","shuffleQuestionsList","slice","questionsList","scores","Array","fill","judgeCount","gameOver","getMessage","msg","newRound","reset","prevIndex","every","item","endGame","Swal","close","Math","floor","random","temp","reverse","fontSize","marginLeft","App","onPressCreate","e","roomId","shortid","generate","substring","lobbyChannel","subscribe","channels","withPresence","fire","position","input","allowOutsideClick","inputPlaceholder","showCancelButton","confirmButtonColor","confirmButtonText","width","padding","customClass","heightAuto","popup","confirmButton","cancelButton","then","result","createIsDisabled","onPressJoin","joinRoom","onPressStart","start","unsubscribe","isPlaying","startIsDisabled","init","PubNubReact","publishKey","subscribeKey","addListener","console","log","getStatus","statusEvent","category","margin","disabled","textAlign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.50e2403a.chunk.js","sourcesContent":["import React from 'react';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: this.props.judgeMode ? this.props.players[0] : \"\" };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.onClick(this.state.value);\n    this.setState({ value: this.props.judgeMode ? this.props.players[0] : \"\" });\n  }\n\n  render() {\n    return (\n      <div>\n        {!this.props.judgeMode &&\n          <form className=\"ui form\" onSubmit={this.handleSubmit}>\n            <div className=\"field\">\n              <label>{this.props.question}:</label>\n              <div className=\"ui action input\" style={{ maxWidth: \"500px\" }}>\n                <input className=\"ui input\" type=\"text\" placeholder=\"answer\" value={this.state.value} onChange={this.handleChange} />\n                <button className=\"ui button\" value=\"Submit\">Submit</button>\n              </div>\n            </div>\n          </form>\n        }\n        {this.props.judgeMode &&\n          <form className=\"ui form\" onSubmit={this.handleSubmit}>\n            <label style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\n              <p style={{ display: \"inline\", fontWeight: \"bold\" }}>{this.props.question}:</p>&nbsp;\n                  <p style={{ display: \"inline\", fontWeight: \"bold\", color: \"CornflowerBlue\" }}>{this.props.answer}</p>\n            </label>\n            <div className=\"inline fields\">\n              <div className=\"field\">\n                <select className=\"ui selection dropdown\" value={this.state.value} onChange={this.handleChange}>\n                  {this.props.players.map((player) => <option key={player} value={player}>{player}</option>)}\n                </select>\n              </div>\n              <div className=\"field\">\n                <input className=\"ui button\" type=\"submit\" value=\"Submit\" />\n              </div>\n            </div>\n          </form>\n        }\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React from 'react';\nimport Form from './Form';\n\nclass Board extends React.Component {\n\n  // Create the 3 x 3 board\n  createBoard(row) {\n    const board = [];\n    let cellCounter = 0;\n\n    for (let i = 0; i < row; i += 1) {\n      const columns = [];\n      columns.push(this.renderSquare(cellCounter++));\n      board.push(<div key={i}>{columns}</div>);\n    }\n\n    return board;\n  }\n\n  renderSquare(i) {\n    return (\n      <div style={{ marginBottom: \"10px\"}} key={i}>\n        {((this.props.answers[i] === \"\" && !this.props.roundDone) || this.props.judgeMode) &&\n          <Form\n            judgeMode={this.props.judgeMode}\n            players={this.props.players}\n            question={this.props.questions[i]}\n            answer={this.props.answers[i]}\n            onClick={(value) => this.props.onClick(i, value)} />\n        }\n        {((this.props.answers[i] !== \"\" && !this.props.judgeMode) || (this.props.roundDone && !this.props.judgeMode)) &&\n          <div>\n            <p style={{ display: \"inline\" }}>{this.props.questions[i]}:</p>&nbsp;\n          <p style={{ display: \"inline\", color: \"CornflowerBlue\" }}>{this.props.answers[i]}</p>\n          </div>\n        }\n      </div>\n    );\n  }\n\n  render() {\n    return <div>{this.createBoard(this.props.blanks)}</div>;\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport Board from './Board';\nimport Swal from \"sweetalert2\";\nimport questionsList from './questions.json';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.userIndex = this.props.players.indexOf(this.props.name);\n    this.targetIndex = this.userIndex + 1;\n    if (this.targetIndex >= this.props.players.length) {\n      this.targetIndex = 0;\n    }\n    var target = this.props.players[this.targetIndex];\n\n    // create multidimensional arrays this way for an annoying reason\n    var rows = this.props.occupants; //num of players\n    var cols = this.props.occupants - 1; //answer blanks\n    var answers = [];\n    var answerers = [];\n\n    for (let i = 0; i < rows; i++) {\n      var answerBlanks = [];\n      var answererBlanks = [];\n      for (let j = 0; j < cols; j++) {\n        answerBlanks.push(\"\");\n        answererBlanks.push(\"\");\n      }\n      answers.push(answerBlanks);\n      answerers.push(answererBlanks);\n    }\n\n    var questions = [];\n    var shuffledQuestionsList = [];\n    if (this.props.isRoomCreator) {\n      shuffledQuestionsList = this.shuffleQuestionsList();\n      questions = shuffledQuestionsList.slice(0, this.props.occupants - 1);\n      this.props.pubnub.publish({\n        message: {\n          questionsList: shuffledQuestionsList,\n          questions: questions,\n        },\n        channel: this.props.gameChannel\n      });\n    }\n\n    this.state = {\n      target: target,\n\n      scores: Array(this.props.occupants).fill(0),\n      backlog: Array(this.props.occupants).fill(1),\n\n      questionsList: shuffledQuestionsList,\n      questions: questions,\n      answers: answers, // [player][answer]\n      answerers: answerers,\n\n      roundDone: false,\n      judgeMode: false,\n    };\n\n    this.judgeCount = 0;\n    this.gameOver = false;\n    this.players = this.props.players;\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n      // set questions\n      if (msg.message.questions) {\n        this.setState({\n          questionsList: msg.message.questionsList,\n          questions: msg.message.questions,\n        });\n      }\n\n      // update scores / done judging? / new round?\n      else if (msg.message.judge) {\n        this.setState((state) => {\n          var scores = state.scores;\n          scores[msg.message.answererIndex] = scores[msg.message.answererIndex] + 1;\n          if (msg.message.correctGuess) {\n            scores[msg.message.user] = scores[msg.message.user] + 1;\n          }\n          return {\n            scores: scores,\n            judgeMode: msg.message.judge === this.players[this.userIndex] ? false : state.judgeMode\n          };\n        });\n\n        this.judgeCount++;\n        if (this.judgeCount === this.props.occupants) {\n          this.newRound();\n        }\n      }\n\n      // someone 'made move' aka answered a question\n      else if (!msg.message.reset && msg.message.name) {\n        this.setState((state) => {\n          var backlog = state.backlog;\n          var answers = state.answers;\n          var answerers = state.answerers;\n          answers[msg.message.oldTargetIndex][msg.message.index] = (msg.message.answer === \"\") ? \"no answer\" : msg.message.answer;\n          answerers[msg.message.oldTargetIndex][msg.message.index] = msg.message.name;\n\n          //update backlog (prev person+1, current person-1)\n          backlog[msg.message.userIndex] = backlog[msg.message.userIndex] - 1;\n          var prevIndex = msg.message.userIndex - 1;\n          if (prevIndex < 0) {\n            prevIndex = this.players.length - 1;\n          }\n          if (msg.message.oldTargetIndex !== prevIndex) { // dont add to prev person's backlog if they're getting their own back\n            backlog[prevIndex] = backlog[prevIndex] + 1;\n          }\n\n          var judgeMode = false;\n          if (backlog.every(item => item === 0)) {\n            judgeMode = true;\n          }\n\n          return {\n            answers: answers,\n            answerers: answerers,\n            backlog: backlog,\n            judgeMode: state.judgeMode || judgeMode\n          };\n        });\n      }\n\n      // Start a new game\n      else if (msg.message.reset) {\n        this.userIndex = this.players.indexOf(this.props.name);\n        this.targetIndex = this.userIndex + 1;\n        if (this.targetIndex >= this.players.length) {\n          this.targetIndex = 0;\n        }\n        var target = this.players[this.targetIndex];\n\n        this.setState({\n          target: target,\n\n          scores: Array(this.props.occupants).fill(0),\n          backlog: Array(this.props.occupants).fill(1),\n\n          questions: Array(this.props.occupants - 1).fill(\"q\"),\n          answers: Array(this.props.occupants).fill(Array(this.props.occupants - 1).fill(\"\")), // [player][answer]\n          answerers: Array(this.props.occupants).fill(Array(this.props.occupants - 1).fill(\"\")),\n\n          roundDone: false,\n          judgeMode: false,\n        });\n\n        this.gameOver = false;\n      }\n\n      // End the game and go back to the lobby\n      else if (msg.message.endGame) {\n        Swal.close();\n        this.props.endGame();\n      }\n    });\n  }\n\n  shuffleQuestionsList() {\n    var shuffledQuestionsList = [...questionsList];\n    for (let i = shuffledQuestionsList.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i)\n      const temp = shuffledQuestionsList[i]\n      shuffledQuestionsList[i] = shuffledQuestionsList[j]\n      shuffledQuestionsList[j] = temp\n    }\n    return shuffledQuestionsList;\n  }\n\n  onMakeMove = (index, answer) => {\n    // Check if user has backlog & field is empty\n    if (this.state.backlog[this.userIndex] > 0 && !this.state.answers[this.targetIndex][index]) {\n      //next target\n      var oldTargetIndex = this.targetIndex;\n      // update target\n      this.targetIndex++;\n      if (this.targetIndex >= this.players.length) {\n        this.targetIndex = 0;\n      }\n      var target = this.players[this.targetIndex];\n      var roundDone = false;\n      if (this.targetIndex === this.userIndex) {\n        roundDone = true;\n      }\n      this.setState({\n        target: target,\n        roundDone: roundDone,\n      });\n\n      this.props.pubnub.publish({\n        message: {\n          oldTargetIndex: oldTargetIndex,\n          index: index,\n          answer: answer,\n          name: this.props.name,\n          userIndex: this.userIndex,\n        },\n        channel: this.props.gameChannel\n      });\n    }\n  }\n\n  onGuess = (index, guess) => {\n    var answerer = this.state.answerers[this.userIndex][index];\n    var answererIndex = this.players.indexOf(answerer);\n\n    var correctGuess = false;\n    if (answerer === guess) {\n      correctGuess = true;\n    }\n\n    // Publish move to the channel\n    this.props.pubnub.publish({\n      message: {\n        judge: this.players[this.userIndex],\n        user: this.userIndex,\n        answererIndex: answererIndex,\n        correctGuess: correctGuess\n      },\n      channel: this.props.gameChannel\n    });\n\n    // Check if there is a winner\n    // this.checkForWinner()\n  }\n\n  // checkForWinner() {\n  //   const winnerIndex = this.state.scores.findIndex(score => score >= 10);\n  //   if (winnerIndex >= 0) {\n  //     this.gameOver = true;\n  //     this.newRound(this.players[winnerIndex]);\n  //     // change state in order to rerender ?\n  //   }\n  // };\n\n  newRound() { // reset everything except questionsList, reverse players/scores & update user index\n    this.players = this.players.reverse();\n    this.userIndex = this.players.indexOf(this.props.name);\n    this.targetIndex = this.userIndex + 1;\n    if (this.targetIndex >= this.players.length) {\n      this.targetIndex = 0;\n    }\n    var target = this.players[this.targetIndex];\n\n    // create multidimensional arrays this way for an annoying reason\n    var rows = this.props.occupants; //number of players\n    var cols = this.props.occupants - 1; //answer blanks\n    var answers = [];\n    var answerers = [];\n\n    for (let i = 0; i < rows; i++) {\n      var answerBlanks = [];\n      var answererBlanks = [];\n      for (let j = 0; j < cols; j++) {\n        answerBlanks.push(\"\");\n        answererBlanks.push(\"\");\n      }\n      answers.push(answerBlanks);\n      answerers.push(answererBlanks);\n    }\n\n    var i = this.state.questionsList.indexOf(this.state.questions[this.state.questions.length - 1]);\n    var questions = this.state.questionsList.slice(i + 1, i + this.props.occupants);\n\n    this.setState((state) => { //set state this way because of scores relying on state.scores\n      return {\n        target: target,\n        scores: state.scores.reverse(),\n        backlog: Array(this.props.occupants).fill(1),\n        questions: questions,\n        answers: answers, // [player][answer]\n        answerers: answerers,\n        roundDone: false,\n        judgeMode: false,\n      };\n    });\n\n    this.judgeCount = 0;\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div>\n          <p style={{ display: \"inline\", fontSize: \"26px\" }}>{this.props.name}</p>&nbsp;&nbsp;&nbsp;&nbsp;\n          <p style={{ display: \"inline\" }}>Score: {this.state.scores[this.userIndex]}</p>\n          {this.state.scores[this.userIndex] >= 8 && <i className=\"yellow trophy icon\" style={{ marginLeft: \"10px\" }} />}\n          <p>Backlog: {this.state.backlog[this.userIndex]}</p>\n        </div>\n        {!this.state.judgeMode &&\n          <div >\n            <p style={{ fontSize: \"26px\", color: \"Tomato\", marginTop: \"30px\", marginBottom: \"10px\" }}>Target: {this.state.target}</p>\n            {this.state.backlog[this.userIndex] !== 0 &&\n              <Board\n                roundDone={this.state.roundDone}\n                blanks={this.props.occupants - 1}\n                questions={this.state.questions}\n                answers={this.state.answers[this.targetIndex]}\n                onClick={(index, answer) => this.onMakeMove(index, answer)}\n                judgeMode={this.state.judgeMode}\n                players={this.players}\n              />\n            }\n            {this.state.backlog[this.userIndex] === 0 && //includes if you're waiting for your own sheet back\n              <p>waiting...</p>\n            }\n          </div>\n        }\n        {this.state.judgeMode &&\n          <div >\n            <p style={{ fontSize: \"20px\", color: \"Tomato\", marginTop: \"30px\", marginBottom: \"10px\" }}>Guess who wrote your fav answer</p>\n            <Board\n              roundDone={false}\n              blanks={this.props.occupants - 1}\n              questions={this.state.questions}\n              answers={this.state.answers[this.targetIndex]}\n              onClick={(index, guess) => this.onGuess(index, guess)}\n              judgeMode={this.state.judgeMode}\n              players={this.players}\n            />\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport Game from './Game';\nimport PubNubReact from 'pubnub-react';\nimport Swal from \"sweetalert2\";\nimport shortid from 'shortid';\nimport './Game.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.pubnub = new PubNubReact({\n      publishKey: \"pub-c-5a45de7f-2d49-4913-a215-3a91b54a312e\",\n      subscribeKey: \"sub-c-065bec9c-9b29-11ea-8e71-f2b83ac9263d\"\n    });\n\n    this.state = {\n      name: \"\",\n      players: [],\n      isPlaying: false,\n      isRoomCreator: false,\n      createIsDisabled: false,\n      startIsDisabled: true,\n      gameChannel: null,\n    };\n\n    this.occupants = 0;\n    this.lobbyChannel = null;\n    this.roomId = null;\n    this.pubnub.init(this);\n\n     this.pubnub.addListener({\n      message: function (msg) {\n        console.log(\"listener: message in \", msg.channel, msg.message);\n      }\n    })\n  }\n\n  componentDidUpdate() {\n    if (this.lobbyChannel != null) {\n      this.pubnub.getMessage(this.lobbyChannel, (msg) => {\n        if (msg.message.name != null && this.state.isRoomCreator) {\n          this.occupants++;\n          var startIsDisabled = true;\n          if (this.occupants > 2) {\n            startIsDisabled = false;\n          }\n          this.setState((state) => {\n            var players = state.players;\n            players.push(msg.message.name);\n            return {\n              startIsDisabled: startIsDisabled,\n              players: players\n            };\n          })\n        }\n        if (msg.message.start && msg.message.occupants >= 3) {\n          this.occupants = msg.message.occupants;\n          this.pubnub.subscribe({\n            channels: [msg.message.gameChannel],\n            withPresence: true,\n          });\n          this.setState({\n            // isPlaying: msg.message.start,\n            players: msg.message.players,\n            gameChannel: msg.message.gameChannel,\n          })\n        }\n      });\n    }\n\n    if (this.state.gameChannel != null) {\n      this.pubnub.getStatus((statusEvent) => {\n        if (statusEvent.category === \"PNConnectedCategory\") {\n          console.log(\"connected to game channel\");\n          this.setState({\n            isPlaying: true,\n          })\n        }\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.state.gameChannel]\n    });\n  }\n\n  // Create a room channel\n  onPressCreate = (e) => {\n    // Create a random name for the channel\n    this.roomId = shortid.generate().substring(0, 5);\n    this.lobbyChannel = 'tictactoelobby--' + this.roomId;\n    this.occupants++;\n    this.pubnub.subscribe({\n      channels: [this.lobbyChannel],\n      withPresence: true\n    });\n\n    //get name\n    Swal.fire({\n      position: 'top',\n      input: 'text',\n      allowOutsideClick: false,\n      inputPlaceholder: 'Enter your name',\n      showCancelButton: true,\n      confirmButtonColor: 'rgb(208,33,41)',\n      confirmButtonText: 'OK',\n      width: 275,\n      padding: '0.7em',\n      customClass: {\n        heightAuto: false,\n        popup: 'popup-class',\n        confirmButton: 'join-button-class',\n        cancelButton: 'join-button-class'\n      }\n    }).then((result) => {\n      // Check if the user typed a value in the input field\n      if (result.value) {\n        var players = [];\n        players.push(result.value);\n        this.setState({\n          name: result.value,\n          players: players,\n        })\n      }\n    })\n\n    this.setState({\n      isRoomCreator: true,\n      createIsDisabled: true, // Disable the 'Create' button\n    });\n  }\n\n  // The 'Join' button was pressed\n  onPressJoin = (e) => {\n    Swal.fire({\n      position: 'top',\n      input: 'text',\n      allowOutsideClick: false,\n      inputPlaceholder: 'Enter the room id',\n      showCancelButton: true,\n      confirmButtonColor: 'rgb(208,33,41)',\n      confirmButtonText: 'OK',\n      width: 275,\n      padding: '0.7em',\n      customClass: {\n        heightAuto: false,\n        popup: 'popup-class',\n        confirmButton: 'join-button-class',\n        cancelButton: 'join-button-class'\n      }\n    }).then((result) => {\n      // Check if the user typed a value in the input field\n      if (result.value) {\n        this.joinRoom(result.value);\n      }\n    })\n  }\n\n  // Join a room channel\n  joinRoom = (value) => {\n    this.roomId = value;\n    this.lobbyChannel = 'tictactoelobby--' + this.roomId;\n\n    this.pubnub.subscribe({\n      channels: [this.lobbyChannel],\n      withPresence: true\n    });\n\n    //get name\n    Swal.fire({\n      position: 'top',\n      input: 'text',\n      allowOutsideClick: false,\n      inputPlaceholder: 'Enter your name',\n      showCancelButton: true,\n      confirmButtonColor: 'rgb(208,33,41)',\n      confirmButtonText: 'OK',\n      width: 275,\n      padding: '0.7em',\n      customClass: {\n        heightAuto: false,\n        popup: 'popup-class',\n        confirmButton: 'join-button-class',\n        cancelButton: 'join-button-class'\n      }\n    }).then((result) => {\n      // Check if the user typed a value in the input field\n      if (result.value) {\n        this.setState({\n          name: result.value,\n        })\n        this.pubnub.publish({\n          message: {\n            name: result.value,\n          },\n          channel: this.lobbyChannel\n        });\n      }\n    })\n  }\n\n  onPressStart = (e) => {\n    // Check that the player is connected to a channel\n    if (this.lobbyChannel != null) {\n      // Create a different channel for the game\n      var gameChannel = 'tictactoegame--' + this.roomId;\n\n      this.pubnub.publish({\n        message: {\n          start: true,\n          occupants: this.occupants,\n          players: this.state.players,\n          gameChannel: gameChannel\n        },\n        channel: this.lobbyChannel\n      });\n\n      // Close the modals if they are opened\n      Swal.close();\n    }\n  }\n\n  // Reset everything\n  endGame = () => {\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.state.gameChannel]\n    });\n\n    this.setState({\n      name: \"\",\n      players: [],\n      isPlaying: false,\n      isRoomCreator: false,\n      createIsDisabled: false,\n      startIsDisabled: true,\n      gameChannel: null,\n    });\n\n    this.occupants = 0;\n    this.lobbyChannel = null;\n    this.roomId = null;\n    this.pubnub.init(this);\n  }\n\n  render() {\n    return (\n      <div>\n        {!this.state.isPlaying &&\n          <div className=\"lobby\">\n            <h1 style={{ margin: \"auto\", marginBottom: \"30px\" }}>\n              <div style={{ display: \"inline\" }} className=\"content\">Truth Bomb </div>\n              <i style={{ display: \"inline\" }} className=\"bomb icon\"></i>\n            </h1>\n            <p style={{ margin: \"auto\", marginBottom: \"15px\" }}>Share this room ID with your friends: {this.roomId}</p>\n            <div style={{ margin: \"auto\" }}>\n              { // no room id yet -> create or join\n                !this.roomId &&\n                <div className=\"ui buttons\">\n                  <button\n                    className=\"ui button\"\n                    style={{ width: \"90px\" }}\n                    disabled={this.state.createIsDisabled}\n                    onClick={(e) => this.onPressCreate()}\n                  > Create\n                  </button>\n                  <div className=\"or\"></div>\n                  <button\n                    className=\"ui button\"\n                    style={{ width: \"90px\" }}\n                    onClick={(e) => this.onPressJoin()}\n                  > Join\n                  </button>\n                </div>\n              }\n\n              { // created game and waiting for people to join\n                this.roomId && this.state.isRoomCreator &&\n                <div style={{ margin: \"auto\" }}>\n                  <button\n                    className=\"ui button\"\n                    style={{ marginBottom: \"15px\" }}\n                    disabled={this.state.startIsDisabled}\n                    onClick={(e) => this.onPressStart()}\n                  > Start\n                  </button>\n                  {this.state.players.map((player, i) => <p style={{ textAlign: \"center\" }} key={i}>{player}</p>)}\n                </div>\n              }\n\n              { // waiting for roomCreator to start\n                this.roomId != null && !this.state.isRoomCreator &&\n                <div>\n                  <p style={{ textAlign: \"center\" }}>Hi, {this.state.name}!</p>\n                  <p style={{ textAlign: \"center\" }}>waiting for room creator to start...</p>\n                </div>\n              }\n            </div>\n          </div>\n        }\n\n        {this.state.isPlaying &&\n          <Game\n            pubnub={this.pubnub}\n            gameChannel={this.state.gameChannel}\n            name={this.state.name}\n            players={this.state.players}\n            occupants={this.occupants}\n            isRoomCreator={this.state.isRoomCreator}\n            endGame={this.endGame}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}