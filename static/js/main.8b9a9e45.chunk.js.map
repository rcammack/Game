{"version":3,"sources":["Form.js","Board.js","Game.js","App.js","index.js"],"names":["Form","props","state","value","judgeMode","players","handleChange","bind","handleSubmit","event","this","setState","target","preventDefault","onClick","className","onSubmit","question","style","maxWidth","type","placeholder","onChange","marginTop","marginBottom","display","fontWeight","color","answer","map","player","key","React","Component","Board","row","board","cellCounter","i","columns","push","renderSquare","answers","roundDone","questions","createBoard","blanks","Game","publishMove","updatedAnswers","updatedAnswerers","backlog","answerers","onMakeMove","index","targetIndex","userIndex","name","nextTarget","onGuess","guess","scores","answerer","answererIndex","indexOf","pubnub","publish","message","judge","channel","gameChannel","length","rows","occupants","cols","answerBlanks","answererBlanks","j","shuffledQuestionsList","isRoomCreator","shuffleQuestionsList","slice","questionsList","Array","fill","judgeCount","gameOver","getMessage","msg","newRound","reset","undefined","endGame","Swal","close","Math","floor","random","temp","oldTargetIndex","prevIndex","every","item","onMakeMove2","reverse","fontSize","marginLeft","App","onPressCreate","e","roomId","shortid","generate","substring","lobbyChannel","subscribe","channels","withPresence","fire","position","input","allowOutsideClick","inputPlaceholder","showCancelButton","confirmButtonColor","confirmButtonText","width","padding","customClass","heightAuto","popup","confirmButton","cancelButton","then","result","createIsDisabled","onPressJoin","joinRoom","onPressStart","start","unsubscribe","isPlaying","startIsDisabled","init","PubNubReact","publishKey","subscribeKey","addListener","console","log","getStatus","statusEvent","category","margin","disabled","textAlign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8b9a9e45.chunk.js","sourcesContent":["import React from 'react';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: this.props.judgeMode ? this.props.players[0] : \"\" };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.onClick(this.state.value);\n    this.setState({ value: this.props.judgeMode ? this.props.players[0] : \"\" });\n  }\n\n  render() {\n    return (\n      <div>\n        {!this.props.judgeMode &&\n          <form className=\"ui form\" onSubmit={this.handleSubmit}>\n            <div className=\"field\">\n              <label>{this.props.question}:</label>\n              <div className=\"ui action input\" style={{ maxWidth: \"500px\" }}>\n                <input className=\"ui input\" type=\"text\" placeholder=\"answer\" value={this.state.value} onChange={this.handleChange} />\n                <button className=\"ui button\" value=\"Submit\">Submit</button>\n              </div>\n            </div>\n          </form>\n        }\n        {this.props.judgeMode &&\n          <form className=\"ui form\" onSubmit={this.handleSubmit}>\n            <label style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\n              <p style={{ display: \"inline\", fontWeight: \"bold\" }}>{this.props.question}:</p>&nbsp;\n                  <p style={{ display: \"inline\", fontWeight: \"bold\", color: \"CornflowerBlue\" }}>{this.props.answer}</p>\n            </label>\n            <div className=\"inline fields\">\n              <div className=\"field\">\n                <select className=\"ui selection dropdown\" value={this.state.value} onChange={this.handleChange}>\n                  {this.props.players.map((player) => <option key={player} value={player}>{player}</option>)}\n                </select>\n              </div>\n              <div className=\"field\">\n                <input className=\"ui button\" type=\"submit\" value=\"Submit\" />\n              </div>\n            </div>\n          </form>\n        }\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React from 'react';\nimport Form from './Form';\n\nclass Board extends React.Component {\n\n  // Create the 3 x 3 board\n  createBoard(row) {\n    const board = [];\n    let cellCounter = 0;\n\n    for (let i = 0; i < row; i += 1) {\n      const columns = [];\n      columns.push(this.renderSquare(cellCounter++));\n      board.push(<div key={i}>{columns}</div>);\n    }\n\n    return board;\n  }\n\n  renderSquare(i) {\n    return (\n      <div style={{ marginBottom: \"10px\"}} key={i}>\n        {((this.props.answers[i] === \"\" && !this.props.roundDone) || this.props.judgeMode) &&\n          <Form\n            judgeMode={this.props.judgeMode}\n            players={this.props.players}\n            question={this.props.questions[i]}\n            answer={this.props.answers[i]}\n            onClick={(value) => this.props.onClick(i, value)} />\n        }\n        {((this.props.answers[i] !== \"\" && !this.props.judgeMode) || (this.props.roundDone && !this.props.judgeMode)) &&\n          <div>\n            <p style={{ display: \"inline\" }}>{this.props.questions[i]}:</p>&nbsp;\n          <p style={{ display: \"inline\", color: \"CornflowerBlue\" }}>{this.props.answers[i]}</p>\n          </div>\n        }\n      </div>\n    );\n  }\n\n  render() {\n    return <div>{this.createBoard(this.props.blanks)}</div>;\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport Board from './Board';\nimport Swal from \"sweetalert2\";\nimport questionsList from './questions.json';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.userIndex = this.props.players.indexOf(this.props.name);\n    this.targetIndex = this.userIndex + 1;\n    if (this.targetIndex >= this.props.players.length) {\n      this.targetIndex = 0;\n    }\n    var target = this.props.players[this.targetIndex];\n\n    // create multidimensional arrays this way for an annoying reason\n    var rows = this.props.occupants; //num of players\n    var cols = this.props.occupants - 1; //answer blanks\n    var answers = [];\n    var answerers = [];\n\n    for (let i = 0; i < rows; i++) {\n      var answerBlanks = [];\n      var answererBlanks = [];\n      for (let j = 0; j < cols; j++) {\n        answerBlanks.push(\"\");\n        answererBlanks.push(\"\");\n      }\n      answers.push(answerBlanks);\n      answerers.push(answererBlanks);\n    }\n\n    var questions = [];\n    var shuffledQuestionsList = [];\n    if (this.props.isRoomCreator) {\n      shuffledQuestionsList = this.shuffleQuestionsList();\n      questions = shuffledQuestionsList.slice(0, this.props.occupants - 1);\n      this.props.pubnub.publish({\n        message: {\n          questionsList: shuffledQuestionsList,\n          questions: questions,\n        },\n        channel: this.props.gameChannel\n      });\n    }\n\n    this.state = {\n      target: target,\n\n      scores: Array(this.props.occupants).fill(0),\n      backlog: Array(this.props.occupants).fill(1),\n\n      questionsList: shuffledQuestionsList,\n      questions: questions,\n      answers: answers, // [player][answer]\n      answerers: answerers,\n\n      roundDone: false,\n      judgeMode: false,\n    };\n\n    this.judgeCount = 0;\n    this.gameOver = false;\n    this.players = this.props.players;\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n      // set questions\n      if (msg.message.questions) {\n        this.setState({\n          questionsList: msg.message.questionsList,\n          questions: msg.message.questions,\n        });\n      }\n\n      // update scores / done judging? / new round?\n      else if (msg.message.judge) {\n        this.setState({\n          scores: msg.message.scores,\n          judgeMode: msg.message.judge === this.players[this.userIndex] ? false : this.state.judgeMode,\n        });\n\n        this.judgeCount++;\n        if (this.judgeCount === this.props.occupants) {\n          this.newRound();\n        }\n      }\n\n      // publish answer\n      else if (!msg.message.reset && msg.message.backlog !== undefined) {\n        this.publishMove(msg.message.answers, msg.message.answerers, msg.message.backlog, msg.message.judgeMode);\n      }\n\n      // Start a new game\n      else if (msg.message.reset) {\n        this.userIndex = this.players.indexOf(this.props.name);\n        this.targetIndex = this.userIndex + 1;\n        if (this.targetIndex >= this.players.length) {\n          this.targetIndex = 0;\n        }\n        var target = this.players[this.targetIndex];\n\n        this.setState({\n          target: target,\n\n          scores: Array(this.props.occupants).fill(0),\n          backlog: Array(this.props.occupants).fill(1),\n\n          questions: Array(this.props.occupants - 1).fill(\"q\"),\n          answers: Array(this.props.occupants).fill(Array(this.props.occupants - 1).fill(\"\")), // [player][answer]\n          answerers: Array(this.props.occupants).fill(Array(this.props.occupants - 1).fill(\"\")),\n\n          roundDone: false,\n          judgeMode: false,\n        });\n\n        this.gameOver = false;\n      }\n\n      // End the game and go back to the lobby\n      else if (msg.message.endGame) {\n        Swal.close();\n        this.props.endGame();\n      }\n    });\n  }\n\n  shuffleQuestionsList() {\n    var shuffledQuestionsList = [...questionsList];\n    for (let i = shuffledQuestionsList.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i)\n      const temp = shuffledQuestionsList[i]\n      shuffledQuestionsList[i] = shuffledQuestionsList[j]\n      shuffledQuestionsList[j] = temp\n    }\n    return shuffledQuestionsList;\n  }\n\n  nextTarget() { // !!! only use if you want to continue onMakeMove2 !!!\n    var oldTargetIndex = this.targetIndex;\n    // update target\n    this.targetIndex++;\n    if (this.targetIndex >= this.players.length) {\n      this.targetIndex = 0;\n    }\n    var target = this.players[this.targetIndex];\n\n    //update backlog (prev person+1, current person-1)\n    var backlog = this.state.backlog;\n    backlog[this.userIndex] = backlog[this.userIndex] - 1;\n    var prevIndex = this.userIndex - 1;\n    if (prevIndex < 0) {\n      prevIndex = this.players.length - 1;\n    }\n    if (oldTargetIndex !== prevIndex) { // dont add to prev person's backlog if they're getting their own back\n      backlog[prevIndex] = backlog[prevIndex] + 1;\n    }\n\n    var roundDone = false;\n    if (this.targetIndex === this.userIndex) {\n      roundDone = true;\n    }\n\n    var judgeMode = false;\n    if (backlog.every(item => item === 0)) {\n      judgeMode = true;\n    }\n\n    this.setState({\n      target: target,\n      backlog: backlog,\n      roundDone: roundDone,\n      judgeMode: judgeMode,\n    },\n      () => { this.onMakeMove2(); });\n  }\n\n  newRound() { // reset everything except questionsList, reverse players/scores & update user index\n    this.players = this.players.reverse();\n    this.userIndex = this.players.indexOf(this.props.name);\n    this.targetIndex = this.userIndex + 1;\n    if (this.targetIndex >= this.players.length) {\n      this.targetIndex = 0;\n    }\n    var target = this.players[this.targetIndex];\n\n    // create multidimensional arrays this way for an annoying reason\n    var rows = this.props.occupants; //number of players\n    var cols = this.props.occupants - 1; //answer blanks\n    var answers = [];\n    var answerers = [];\n\n    for (let i = 0; i < rows; i++) {\n      var answerBlanks = [];\n      var answererBlanks = [];\n      for (let j = 0; j < cols; j++) {\n        answerBlanks.push(\"\");\n        answererBlanks.push(\"\");\n      }\n      answers.push(answerBlanks);\n      answerers.push(answererBlanks);\n    }\n\n    var i = this.state.questionsList.indexOf(this.state.questions[this.state.questions.length - 1]);\n    var questions = this.state.questionsList.slice(i + 1, i + this.props.occupants);\n\n    this.setState({\n      target: target,\n      scores: this.state.scores.reverse(),\n      backlog: Array(this.props.occupants).fill(1),\n      questions: questions,\n      answers: answers, // [player][answer]\n      answerers: answerers,\n      roundDone: false,\n      judgeMode: false,\n    });\n\n    this.judgeCount = 0;\n  }\n\n  // checkForWinner() {\n  //   const winnerIndex = this.state.scores.findIndex(score => score >= 10);\n  //   if (winnerIndex >= 0) {\n  //     this.gameOver = true;\n  //     this.newRound(this.players[winnerIndex]);\n  //     // change state in order to rerender ?\n  //   }\n  // };\n\n  // Opponent's move is published to the board\n  publishMove = (updatedAnswers, updatedAnswerers, backlog, judgeMode) => {\n    this.setState({\n      answers: updatedAnswers,\n      answerers: updatedAnswerers,\n      backlog: backlog,\n      judgeMode: this.state.judgeMode || judgeMode,\n    });\n\n    // this.checkForWinner()\n  }\n\n  onMakeMove = (index, answer) => {\n    var answers = this.state.answers;\n    var answerers = this.state.answerers;\n    var backlog = this.state.backlog;\n    var targetIndex = this.targetIndex;\n\n    // Check if user has backlog field is empty\n    if (backlog[this.userIndex] > 0 && !answers[targetIndex][index]) {\n      answers[targetIndex][index] = (answer === \"\") ? \"no answer\" : answer;\n      answerers[targetIndex][index] = this.props.name;\n      this.setState({\n        answers: answers,\n        answerers: answerers\n      });\n      this.nextTarget();\n      // continued in onMakeMove2()\n    }\n  }\n\n  onMakeMove2() { //continuation of onMakeMove after setState finishes in nextTarget()\n    // Publish move to the channel\n    this.props.pubnub.publish({\n      message: {\n        answers: this.state.answers,\n        answerers: this.state.answerers,\n        backlog: this.state.backlog,\n        judgeMode: this.state.judgeMode,\n      },\n      channel: this.props.gameChannel\n    });\n  }\n\n  onGuess = (index, guess) => {\n    var scores = this.state.scores;\n    var answerer = this.state.answerers[this.userIndex][index];\n    var answererIndex = this.players.indexOf(answerer);\n    // increment answerer's score\n    scores[answererIndex] = scores[answererIndex] + 1;\n\n    // increment user's score if guess matches answerer\n    if (answerer === guess) {\n      scores[this.userIndex] = scores[this.userIndex] + 1;\n    }\n\n    // Publish move to the channel\n    this.props.pubnub.publish({\n      message: {\n        judge: this.players[this.userIndex],\n        scores: scores,\n      },\n      channel: this.props.gameChannel\n    });\n\n    // Check if there is a winner\n    // this.checkForWinner()\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <p style={{ display: \"inline\", fontSize: \"26px\" }}>{this.props.name}</p>&nbsp;&nbsp;&nbsp;&nbsp;\n          <p style={{ display: \"inline\" }}>Score: {this.state.scores[this.userIndex]}</p>\n          {this.state.scores[this.userIndex] >= 8 && <i className=\"yellow trophy icon\" style={{ marginLeft: \"10px\" }}/>}\n          <p>Backlog: {this.state.backlog[this.userIndex]}</p>\n        </div>\n        {!this.state.judgeMode &&\n          <div >\n            <p style={{ fontSize: \"26px\", color: \"Tomato\", marginTop: \"30px\", marginBottom: \"10px\" }}>Target: {this.state.target}</p>\n            {this.state.backlog[this.userIndex] !== 0 &&\n              <Board\n                roundDone={this.state.roundDone}\n                blanks={this.props.occupants - 1}\n                questions={this.state.questions}\n                answers={this.state.answers[this.targetIndex]}\n                onClick={(index, answer) => this.onMakeMove(index, answer)}\n                judgeMode={this.state.judgeMode}\n                players={this.players}\n              />\n            }\n            {this.state.backlog[this.userIndex] === 0 && //includes if you're waiting for your own sheet back\n              <p>waiting...</p>\n            }\n          </div>\n        }\n        {this.state.judgeMode &&\n          <div >\n            <p style={{ fontSize: \"20px\", color: \"Tomato\", marginTop: \"30px\", marginBottom: \"10px\" }}>Guess who wrote your fav answer</p>\n            <Board\n              roundDone={false}\n              blanks={this.props.occupants - 1}\n              questions={this.state.questions}\n              answers={this.state.answers[this.targetIndex]}\n              onClick={(index, guess) => this.onGuess(index, guess)}\n              judgeMode={this.state.judgeMode}\n              players={this.players}\n            />\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport Game from './Game';\nimport PubNubReact from 'pubnub-react';\nimport Swal from \"sweetalert2\";\nimport shortid from 'shortid';\nimport './Game.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.pubnub = new PubNubReact({\n      publishKey: \"pub-c-5a45de7f-2d49-4913-a215-3a91b54a312e\",\n      subscribeKey: \"sub-c-065bec9c-9b29-11ea-8e71-f2b83ac9263d\"\n    });\n\n    this.state = {\n      name: \"\",\n      players: [],\n      isPlaying: false,\n      isRoomCreator: false,\n      createIsDisabled: false,\n      startIsDisabled: true,\n      gameChannel: null,\n    };\n\n    this.occupants = 0;\n    this.lobbyChannel = null;\n    this.roomId = null;\n    this.pubnub.init(this);\n\n     this.pubnub.addListener({\n      message: function (msg) {\n        console.log(\"listener: message in \", msg.channel, msg.message);\n      }\n    })\n  }\n\n  componentDidUpdate() {\n    if (this.lobbyChannel != null) {\n      this.pubnub.getMessage(this.lobbyChannel, (msg) => {\n        if (msg.message.name != null && this.state.isRoomCreator) {\n          var players = this.state.players;\n          players.push(msg.message.name);\n          this.occupants++;\n          var startIsDisabled = true;\n          if (this.occupants > 1) {\n            startIsDisabled = false;\n          }\n          this.setState({\n            startIsDisabled: startIsDisabled,\n            players: players\n          })\n        }\n        if (msg.message.start && msg.message.occupants >= 2) {\n          this.occupants = msg.message.occupants;\n          this.pubnub.subscribe({\n            channels: [msg.message.gameChannel],\n            withPresence: true,\n          });\n          this.setState({\n            // isPlaying: msg.message.start,\n            players: msg.message.players,\n            gameChannel: msg.message.gameChannel,\n          })\n        }\n      });\n    }\n\n    if (this.state.gameChannel != null) {\n      this.pubnub.getStatus((statusEvent) => {\n        if (statusEvent.category === \"PNConnectedCategory\") {\n          console.log(\"connected to game channel\");\n          this.setState({\n            isPlaying: true,\n          })\n        }\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.state.gameChannel]\n    });\n  }\n\n  // Create a room channel\n  onPressCreate = (e) => {\n    // Create a random name for the channel\n    this.roomId = shortid.generate().substring(0, 5);\n    this.lobbyChannel = 'tictactoelobby--' + this.roomId;\n    this.occupants++;\n    this.pubnub.subscribe({\n      channels: [this.lobbyChannel],\n      withPresence: true\n    });\n\n    //get name\n    Swal.fire({\n      position: 'top',\n      input: 'text',\n      allowOutsideClick: false,\n      inputPlaceholder: 'Enter your name',\n      showCancelButton: true,\n      confirmButtonColor: 'rgb(208,33,41)',\n      confirmButtonText: 'OK',\n      width: 275,\n      padding: '0.7em',\n      customClass: {\n        heightAuto: false,\n        popup: 'popup-class',\n        confirmButton: 'join-button-class',\n        cancelButton: 'join-button-class'\n      }\n    }).then((result) => {\n      // Check if the user typed a value in the input field\n      if (result.value) {\n        var players = this.state.players;\n        players.push(result.value);\n        this.setState({\n          name: result.value,\n          players: players,\n        })\n      }\n    })\n\n    this.setState({\n      isRoomCreator: true,\n      createIsDisabled: true, // Disable the 'Create' button\n    });\n  }\n\n  // The 'Join' button was pressed\n  onPressJoin = (e) => {\n    Swal.fire({\n      position: 'top',\n      input: 'text',\n      allowOutsideClick: false,\n      inputPlaceholder: 'Enter the room id',\n      showCancelButton: true,\n      confirmButtonColor: 'rgb(208,33,41)',\n      confirmButtonText: 'OK',\n      width: 275,\n      padding: '0.7em',\n      customClass: {\n        heightAuto: false,\n        popup: 'popup-class',\n        confirmButton: 'join-button-class',\n        cancelButton: 'join-button-class'\n      }\n    }).then((result) => {\n      // Check if the user typed a value in the input field\n      if (result.value) {\n        this.joinRoom(result.value);\n      }\n    })\n  }\n\n  // Join a room channel\n  joinRoom = (value) => {\n    this.roomId = value;\n    this.lobbyChannel = 'tictactoelobby--' + this.roomId;\n\n    this.pubnub.subscribe({\n      channels: [this.lobbyChannel],\n      withPresence: true\n    });\n\n    //get name\n    Swal.fire({\n      position: 'top',\n      input: 'text',\n      allowOutsideClick: false,\n      inputPlaceholder: 'Enter your name',\n      showCancelButton: true,\n      confirmButtonColor: 'rgb(208,33,41)',\n      confirmButtonText: 'OK',\n      width: 275,\n      padding: '0.7em',\n      customClass: {\n        heightAuto: false,\n        popup: 'popup-class',\n        confirmButton: 'join-button-class',\n        cancelButton: 'join-button-class'\n      }\n    }).then((result) => {\n      // Check if the user typed a value in the input field\n      if (result.value) {\n        this.setState({\n          name: result.value,\n        })\n        this.pubnub.publish({\n          message: {\n            name: result.value,\n          },\n          channel: this.lobbyChannel\n        });\n      }\n    })\n  }\n\n  onPressStart = (e) => {\n    // Check that the player is connected to a channel\n    if (this.lobbyChannel != null) {\n      // Create a different channel for the game\n      var gameChannel = 'tictactoegame--' + this.roomId;\n\n      this.pubnub.publish({\n        message: {\n          start: true,\n          occupants: this.occupants,\n          players: this.state.players,\n          gameChannel: gameChannel\n        },\n        channel: this.lobbyChannel\n      });\n\n      // Close the modals if they are opened\n      Swal.close();\n    }\n  }\n\n  // Reset everything\n  endGame = () => {\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.state.gameChannel]\n    });\n\n    this.setState({\n      name: \"\",\n      players: [],\n      isPlaying: false,\n      isRoomCreator: false,\n      createIsDisabled: false,\n      startIsDisabled: true,\n      gameChannel: null,\n    });\n\n    this.occupants = 0;\n    this.lobbyChannel = null;\n    this.roomId = null;\n    this.pubnub.init(this);\n  }\n\n  render() {\n    return (\n      <div>\n        {!this.state.isPlaying &&\n          <div className=\"lobby\">\n            <h1 style={{ margin: \"auto\", marginBottom: \"30px\" }}>\n              <div style={{ display: \"inline\" }} className=\"content\">Truth Bomb </div>\n              <i style={{ display: \"inline\" }} className=\"bomb icon\"></i>\n            </h1>\n            <p style={{ margin: \"auto\", marginBottom: \"15px\" }}>Share this room ID with your friends: {this.roomId}</p>\n            <div style={{ margin: \"auto\" }}>\n              { // no room id yet -> create or join\n                !this.roomId &&\n                <div className=\"ui buttons\">\n                  <button\n                    className=\"ui button\"\n                    style={{ width: \"90px\" }}\n                    disabled={this.state.createIsDisabled}\n                    onClick={(e) => this.onPressCreate()}\n                  > Create\n                  </button>\n                  <div className=\"or\"></div>\n                  <button\n                    className=\"ui button\"\n                    style={{ width: \"90px\" }}\n                    onClick={(e) => this.onPressJoin()}\n                  > Join\n                  </button>\n                </div>\n              }\n\n              { // created game and waiting for people to join\n                this.roomId && this.state.isRoomCreator &&\n                <div style={{ margin: \"auto\" }}>\n                  <button\n                    className=\"ui button\"\n                    style={{ marginBottom: \"15px\" }}\n                    disabled={this.state.startIsDisabled}\n                    onClick={(e) => this.onPressStart()}\n                  > Start\n                  </button>\n                  {this.state.players.map((player, i) => <p style={{ textAlign: \"center\" }} key={i}>{player}</p>)}\n                </div>\n              }\n\n              { // waiting for roomCreator to start\n                this.roomId != null && !this.state.isRoomCreator &&\n                <div>\n                  <p style={{ textAlign: \"center\" }}>Hi, {this.state.name}!</p>\n                  <p style={{ textAlign: \"center\" }}>waiting for room creator to start...</p>\n                </div>\n              }\n            </div>\n          </div>\n        }\n\n        {this.state.isPlaying &&\n          <Game\n            pubnub={this.pubnub}\n            gameChannel={this.state.gameChannel}\n            name={this.state.name}\n            players={this.state.players}\n            occupants={this.occupants}\n            isRoomCreator={this.state.isRoomCreator}\n            endGame={this.endGame}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}